Projet.create!([
#   {nom: "AEMMS", url: "https://aemms-v3.herokuapp.com/", contenu: "Système de management de la qualité pour les entreprises de soudage par aluminothermie. \n    Conception, développement et mise en œuvre d'une application Web et mobile sur tablettes Windows (C#/Winform/Ruby on Rails/JSON API).\n    Le système a pour objet de s’assurer que les soudures aluminothermiques réalisées sur les voies, dont la SNCF a la responsabilité de la maintenance, satisfont en tous points aux exigences spécifiées par à la Norme européenne EN 14730-2. cf “Cahier des prescriptions communes applicables aux marchés de travaux de voie.\n    Application déployée chez plusieurs prestataires de la SNCF (ETF, LSF, Colas Rail, SOTRAMEST, ...)", poids: 100, commit: 217, deploy: 129, coffee: 90, github: nil, tag_list: "Rails 7, DaisyUI, TailwindCSS"},
#   {nom: "RNMA", url: "https//www.rnma.fr/", contenu: "Plateforme de gestion du portefeuille d'adhérents du Réseau National des Maisons des Associations. \n    Comprend : la gestion des adhésions, des cotisations, des contacts, des actions, et des ressources documentaires. \n    Un portail réservé aux membres du RNMA permet la consultations d'informations ciblées et la discussion entre membres via un 'mini réseau social' interne. ", poids: 90, commit: 1196, deploy: 468, coffee: 265, github: nil, tag_list: "Rails 6, Bulma, JS, Stimulus"},
#   {nom: "INNOSERV", url: "https://innoserv-project.herokuapp.com/", contenu: "INNOSERV est un projet développant un programme de recherche à l'échelle de l'UE pour évaluer l'innovation dans le domaine des services sociaux (en particulier pour les services de santé, d'éducation et d'aide sociale). Cela aidera à définir les futures activités de recherche.", poids: 80, commit: 113, deploy: 38, coffee: 13, github: "https://github.com/philippe-nougaillon/INNOSERV_WWW", tag_list: "Rails 7, Bulma, JS"},
#   {nom: "PLANNING IAE-PARIS", url: "https://planning-iae.herokuapp.com/", contenu: "Application de gestion de Planning de l'IAE Paris - Sorbonne Business School - Université Paris 1 Panthéon-Sorbonne. Application web de planification de cours. Collaborative, flexible et simple d'utilisation.", poids: 70, commit: 771, deploy: 482, coffee: 138, github: "https://github.com/philippe-nougaillon/Planning_IAE", tag_list: "Rails 6, Bootstrap, Stimulus"},
#   {nom: "Disturbances", url: "https://disturbances.herokuapp.com/", contenu: "Outil de collecte et d'analyse des perturbations du traffic TER Grand Est, à l'usage de la FNAUT-Est.", poids: 60, commit: 179, deploy: 85, coffee: 27, github: nil, tag_list: "Rails 7, DaisyUI, TailwindCSS"},
#   {nom: "LTSF pro", url: "https://www.ltsf.pro", contenu: "Plateforme de cotation B2B à l'usage des grossistes du pionnier du T-Shirt français. Conception et développement d'une plateforme B2B pour le pionnier du T-shirt de fabrication française. Cet outil permet de gérer un catalogue des produits, l'état des stocks par taille, et, pour un utilisateur habilité, d'effectuer des cotations aux tarifs de gros. ", poids: 50, commit: 295, deploy: 250, coffee: 43, github: nil, tag_list: "Rails 6, Bulma, Stimulus"},
#   {nom: "Prestofacto", url: "https://prestofacto.philnoug.com/", contenu: "Application libre de facturation de services journaliers. PrestoFacto aide les petites organisations dans la gestion et la facturation de leurs prestations journalières (Repas, garderie, péri-scolaire).", poids: 40, commit: 395, deploy: 226, coffee: 74, github: "https://github.com/philippe-nougaillon/prestofacto", tag_list: "Rails 6, Bulma"},
#   {nom: "Affichage-Planning", url: "https://tableau-affichage-horaires-iae.herokuapp.com/", contenu: "Tableau d'affichage dynamique des Horaires de Cours, optimisé pour défilement sur grand écran.", poids: 30, commit: 20, deploy: 20, coffee: 9, github: "https://github.com/philippe-nougaillon/Planning_IAE-Tableau-Affichage_REACT", tag_list: "Rails 6, React, React on Rails"},
#   {nom: "Incentive Center", url: "https://hello-happy-life.herokuapp.com/", contenu: "La vocation de cette plateforme est de réunir ses membres autour de la pratique d'une activité, sportive ou non", poids: 25, commit: 144, deploy: 117, coffee: 59, github: "https://github.com/philippe-nougaillon/hello-happy-life", tag_list: "Rails 7, ActionCable"},
#   {nom: "Portfolio", url: "https://portfolio-philnoug.herokuapp.com/", contenu: "C'est le portfolio de l'essentiel de nos projets de l'année, mais il en manque encore quelques-un !", poids: 20, commit: 43, deploy: 17, coffee: 13, github: "https://github.com/philippe-nougaillon/portfolio", tag_list: "Rails 7, DaisyUI, TailwindCSS"},
#   {nom: "Acteslib", url: "https://acteslib.herokuapp.com/", contenu: "Système de demande et d'échange de documents administratifs dématérialisés (acte de naissance, acte de décès...). Projet en cours de déploiement en Côte d'Ivoire.", poids: 27, commit: 36, deploy: 32, coffee: 24, github: "https://github.com/philippe-nougaillon/acteslib", tag_list: "Rails 7, DaisyUI, TailwindCSS"},
#   {nom: "Camino", url: "https://camino2.herokuapp.com/", contenu: "Plateforme de gestion de projets (Suivi d'interventions, GMAO, etc...), en équipe et en mobilité", poids: 35, commit: 80, deploy: 46, coffee: 22, github: "https://github.com/philippe-nougaillon/Camino2", tag_list: "Rails 7, DaisyUI, TailwindCSS"}
])

# Post.create!([
#   {title: "Back-end IoT avec Ruby on Rails", content: "### Le but de ce tutoriel est de vous guider dans la création d'un back-end IoT avec Ruby on Rails\n\nSouvent, le moyen le plus simple pour relier un producteur de données (capteur IoT) à un consommateur (appli mobile) est d'utiliser un serveur back-end placé entre le producteur et le consommateur. Le but de ce tutoriel est de vous guider dans la création d'un back-end, et, chemin faisant (pan pan), de vous montrer comme il est simple et rapide de le faire avec Ruby on Rails.\n\nImaginons que vous ayez une carte Arduino dotée de deux capteurs qui collectent température et humidité. Vous souhaitez visualisez ces mesures sous la forme de graphiques (thermomètre, jauge) dans une application mobile. Le rôle du serveur back-end va être de stocker les données qui lui seront transmises par une requête REST (HTTP POST) et de les restituer à la demande sous la forme d'une liste JSON via une requête HTTP GET.\n\n~~~~\nFLUX = Capteurs > Back-end > Consommateurs\n~~~~\n\n\n### Installation de Ruby on Rails\n\nComme le framework Ruby on Rails (RoR) est basé sur le langage Ruby, il va falloir l'installer et dans la bonne version. Si vous êtes sous Linux ou MacOS, Ruby est surement déjà installé. Vérifions quelle version est installée :\n\n~~~~\n$ ruby -v \n\nruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]\n~~~~\n\nIci on est bon car pour installer la dernière version de RoR (la 5.2), il faut au moins la version 2.2.2 de Ruby.\nSi ce n'est pas votre cas et que vous êtes sous Linux, je vous invite à installer rvm qui offre un grand choix de versions et une grande souplesse d'utilisation. Si vous êtes sous Windows, pas de panique, il existe aussi un kit d'installation http://rubyinstaller.org/downloads/\n\nPar défaut, Rails va stocker ses données dans Sqlite, qui est souvent installé par défaut par les distributions Linux actuelle, mais vérifions quand même :\n\n\n~~~~\n$ sqlite3 --version\n\n3.11.0 2016-02-15 17:29:24\n~~~~\n\nRuby dispose de son propre gestionnaire de paquets RubyGems, à l'instar de Node.js avec npm. L'installation de Rails se fait grâce à la commande suivante :\n\n~~~~\n$ gem install rails\n~~~~\n\nAprès un peu d'attente, vous devriez disposer de la toute dernière version Rails.\n\n~~~~\n$ rails -v\n\nRails 5.2.0\n~~~~\n\nNous sommes fin prêts. Let's go Ruby !\n\n### Mise en place du Back-end\n\nRoR facilite la tâche des développeurs Web depuis bientôt 14 ans en fournissant un sur-ensemble au langage Ruby particulièrement bien pensé et dédié au domaine de la création d'applications Web. Cette sophistication se fait sentir dès la première commande qui vous allez passer pour demander la création de l'application.\n\n~~~~\n$ rails new Backend\n~~~~\n\nTous les composants (Gems) nécessaires à son bon fonctionnement sont alors installés et configurés selon un principe cher à RoR; \"Convention over Configuration\". Ce qui signifie que ces composants sont configurés avec un paramétrage de base, issus d'un consensus, qui vous évite de devoir déjà faire des choix et permet de démarrer rapidement le développement son application. Pour une utilisation plus avancée, il est toujours possible d'affiner le paramétrage de base par le biais de l'édition des fichiers de configuration.\n\nComme nous avons besoin de stocker température et humidité, nous allons créer un modèle de données \"Mesure\" qui aura deux attributs: temperature, humidity\n\n~~~~\n$ cd Backend\n\n$ rails generate scaffold Mesure temperature:integer humidity:integer\n\n$ rake db:migrate\n~~~~\n\nEn plus de créer le modèle de données 'Mesure' qui nous permettra de manipuler les données de ce type sans avoir à nous soucier de ce que cela implique comme transactions avec le moteur de base de données, Rails, dans sa grand bonté, a aussi créé tout ce qu'il faut comme code et formulaires pour pouvoir en profiter immédiatement dans le navigateur à cette adresse http://localhost:3000/mesures :\n\n~~~~\n$ rails server\n\n=> Booting Puma\n\n=> Rails 5.2.0 application starting in development\n\n=> Run `rails server -h` for more startup options\n\nPuma starting in single mode...\n\n* Version 3.11.4 (ruby 2.4.1-p111), codename: Love Song\n\n* Min threads: 5, max threads: 5\n\n* Environment: development\n\n* Listening on tcp://0.0.0.0:3000\n~~~~\n\nVous allez pouvoir ajouter, lister, modifier et supprimer à loisirs les mesures que vous aurez entré manuellement, mais là n'est pas le but. Ces mesures doivent être envoyées par vos capteurs au Back-end, à intervalle régulier, au moyen d'une requête POST comme celle-ci :\n\n~~~~\n $ curl --header \"Content-Type: application/json\" --request POST --data '{\"mesure\":{\"temperature\":27,\"humidity\":60}}' http:/localhost:3000/mesures.json\n~~~~\n\nPour que votre application mobile récupère toutes les données stockées dans le Back-end, il suffit de demander, via la requête HTTP GET suivante :\n\n~~~~\nhttp://localhost:3000/mesures.json\n~~~~\n\nSi au lieu d'avoir un message de succès, comme celui-là :\n\n~~~~\n{\"id\":2,\"temperature\":27,\"humidity\":60,\"created_at\":\"2018-06-13T12:15:12.158Z\",\"updated_at\":\"2018-06-13T12:15:12.158Z\",\"url\":\"http://localhost:3000/mesures/2.json\"}\n~~~~\n\nvous voyez surgir un erreur InvalidAuthenticityToken, vous devrez ajouter \"protect_from_forgery prepend: true\" au fichier app/controllers/mesures_controller.rb, juste après la première ligne. Cette alerte est provoquée par une sécurité qui est activée par défaut. Cela rentrera dans l'ordre une fois l'application hébergée sur un serveur distant (heroku?) et l'appel GET fait via HTTPS.\n\n**Inverser l'ordre des mesures**\n\nPar défault, le fichier JSON généré renvoie toutes les mesures dans l'ordre de création (de la plus ancienne à la plus récente). Comme nous allons être intéressé que par la dernière valeur obtenue par les capteurs, il va falloir modifier le comportement par défaut et définir comment obtenir que la dernière mesure, à savoir, trier les mesures de la plus récente à la plus ancienne (DESC), ce qui revient à inverser l'ordre par défaut (ASC) et limiter cette liste à un seul enregistrement. Pout ce faire nous allons utiliser deux scopes: un pour renverser l'odre de tri, et un autre pour limiter la liste :\n\n~~~~\napp/models/mesure.rb\n\nclass Mesure < ApplicationRecord\n\n        scope :desc, -> { order(\"mesures.id DESC\") }\n\n        scope :last_one, -> { limit(1) }\n\nend\n~~~~\n\n**Renvoyer que la dernière mesure**\n\nMaintenant que les scopes sont définis, pour obtenir la dernière mesure il suffit de demander comme suit :\n\n\n~~~~\napp/controllers/mesures_controller.rb\n\n  # GET /mesures\n\n  # GET /mesures.json\n\n  def index\n\n    @mesures = Mesure.desc.last_one\n\n  end\n~~~~\n\n**Rendre les données obligatoires**\n\nAfin d'être certain que les données de température et d'humidité sont bien présentes, nous allons ajouter des tests de validation pour chacune d'elles\n\n~~~~\napp/models/mesure.rb\n\nclass Mesure < ApplicationRecord\n\n        scope :desc, -> { order(\"mesures.id DESC\") }\n\n        scope :last_one, -> { limit(1) }\n\n        validates :temperature,\n\n                  presence: true\n\n        validates :humidity,\n\n                  presence: true\n\nend\n~~~~\n\n**Alléger le fichier json**\n\nModifiez le fichier pour qu'il ne reste que cette ligne:\n\n~~~~\napp/views/mesures/_mesure.json.jbuilder \n\njson.extract! mesure, :id, :temperature, :humidity, :created_at\n~~~~\n\nSi vous ne souhaitez pas avoir d'interface pour l'utilisateur mais uniquement les services d'une API,vous pouvez utiliser l'option --api lors de la creation de l'application Rails.\n\n\nPour aller plus loin :\n\n[l'Authentification avec le gem Devise](https://github.com/plataformatec/devise)\n\n[Faire une petite beauté avec Bootstrap](https://github.com/twbs/bootstrap-rubygem)\n\n[Afficher les données sous forme graphique](https://github.com/ankane/chartkick)\n\n\n", date: "2018-03-01 23:00:00", published: true, tag_list: "rails, iot"},
#   {title: "Welcome to Jekyll!", content: "You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.\n\nTo add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.\n\nJekyll also offers powerful support for code snippets:\n\n{% highlight ruby %}\ndef print_hi(name)\n  puts \"Hi, \#{name}\"\nend\nprint_hi('Tom')\n#=> prints 'Hi, Tom' to STDOUT.\n{% endhighlight %}\n\nCheck out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].\n\n[jekyll-docs]: https://jekyllrb.com/docs/home\n[jekyll-gh]:   https://github.com/jekyll/jekyll\n[jekyll-talk]: https://talk.jekyllrb.com/", date: "2019-03-04 22:00:00", published: false, tag_list: "jekyll, update"},
#   {title: "Afficher les données d'un IoT en Qt", content: "### Afficher les données d'un IoT sous forme d'une jauge\n\nUn exemple d'utilisation de Qt pour l'affichage des données récoltées par un capteur de temperature sous la forme d'une belle jauge, belle comme un compte-tours de voiture ancienne.\n\n![compte-tours](https://doc.qt.io/archives/qt-4.8/images/qml-dialcontrol-example.png)\n\nSur la base de l'exemple QtQuick, gentiment fourni par Qt dans le répertoire C:\\Qt\\Examples\\Qt-5.11.0\\quick\\customitems\\dialcontrol, qui propose une jolie jauge et un slider pour faire varie la valeur de la jauge, j'ai fait cette petite adaptation afin d'aller lire la dernière valeur du capteur de température et de l'afficher dans la jauge.\n\nLa première partie du code est la description de l'interface. Notez l'appel au composant Dial qui est un assemblage complexe d'images qui forment la jauge (aiguille, fond, ombres…). Pour faire varier l'aiguille de la jauge, il suffit de assigner une valeur à la variable dial.value.\n\nUn Timer est utilisé pour appeler la fonction getLastTempFromIoTHUB() à interval régulier. Cette fonction fait un appel Rest GET pour obtenir en réponse une chaine au format JSON contenant la température. Cette réponse est transformée ensuite en valeur numérique pour pouvoir être chargée dans la variable dial.value et ainsi faire varier l'aiguille de notre jauge.\n\n~~~~\n\nimport QtQuick 2.9\nimport \"content\"\n\nRectangle {\n    color: \"#545454\"\n    width: 300; height: 300\n\n    // initialisation du compteur défini dans Dial.qml\n    Dial {\n        id: dial\n        anchors.centerIn: parent\n        value: 0\n    }\n\n    // Un timer pour afficher la temp toutes les 5 minutes\n    Timer {\n        interval: 10000*5; running: true; repeat: true\n        onTriggered: function() {\n            getLastTempFromIoTHUB();\n            time.text = Date().toString()\n        }\n    }\n\n    // Un timer pour afficher la temp (presque) immédiatement\n    Timer {\n        interval: 500; running: true; repeat: false\n        onTriggered: function() {\n            getLastTempFromIoTHUB();\n            time.text = Date().toString()\n        }\n    }\n\n    // Le champ texte amélioré pour affichage de l'heure de rafraichissement\n    Rectangle {\n        id: container\n        anchors { bottom: parent.bottom; left: parent.left\n            right: parent.right; leftMargin: 20; rightMargin: 20\n            bottomMargin: 10\n        }\n        height: 16\n        radius: 8\n        opacity: 0.7\n        antialiasing: true\n        gradient: Gradient {\n            GradientStop { position: 0.0; color: \"gray\" }\n            GradientStop { position: 1.0; color: \"white\" }\n        }\n\n        Text {\n            id: time\n            anchors.left: parent.left\n            anchors.margins: 10\n            text: qsTr(\"Please wait...\")\n        }\n    }\n\n    QuitButton {\n        anchors.right: parent.right\n        anchors.top: parent.top\n        anchors.margins: 10\n    }\n\n    function getLastTempFromIoTHUB() {\n\n      // Create the XMLHttpRequest object\n      var xhr = new XMLHttpRequest\n\n      // Listen to the readyStateChanged signal\n      xhr.onreadystatechange = function() {\n        // If the state changed to DONE, we can parse the response\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          // The responseText looks like this {\"ip\":\"xxx.xxx.xxx.xxx\"}\n          // Parse the responseText string to JSON format\n          var responseJSON = JSON.parse(xhr.responseText)\n          // Read the ip property of the response\n          var ip = responseJSON.ip\n          // Display the ip in the AppText item\n          var temp = responseJSON[0].data[0][1]\n\n          if (temp !== null) {\n              // rafraichir le compteur\n              dial.value = (temp - (temp*15)/100) ; // Enlève 15% de marge d'erreur\n              // Afficher dans la console la temp\n              console.log(Date().toString() + \"| Device#1 TEMP: \" + (temp|0) + \"°\");\n          }\n        }\n      }\n\n      // Define the target of your request\n      xhr.open(\"GET\", \"https://iothub.white-apps.io/mesures/last_temp?device_id=1&limit=1\")\n\n      // Execute the request\n      xhr.send()\n    }\n}\n~~~~\n", date: "2018-05-05 22:00:00", published: true, tag_list: "qt, iot"},
#   {title: "Limiter l'accès à une seule session par utilisateur (Rails)", content: "### Comment limiter l'accès à une seule session utilisateur à la fois, avec le Gem Devise ?\n\nIl arrive parfois que dans des milieux très sensibles à la sécurité, comme la santé, il soit nécessaire de s'assurer qu'un utilisateur est connecté à votre application RoR une seule et unique fois.\n\nLe principe est de générer un token unique à chaque nouvelle session et de l'associer à l'utilisateur.\nSi l'utilisateur tente de se connecter depuis un autre navigateur, c'est le dernier token généré qui sera alors associé à l'utilisateur. La session précédente sera détruite car le token sera obsolète.\n\nPartant du principe que vous avez utilisé Devise pour gérer l'authentification, il vous est alors possible de contrôler qu'un utilisateur n'a qu'une session active en utilisant l'extension \"devise_security_extension\" (https://github.com/phatworx/devise_security_extension\n) comme suit :\n\nAjoutez le gem à votre Gemfile\n\n~~~~\ngem 'devise_security_extension'\n~~~~\n\nAprès avoir fait le rituel bundle install, lancez l'installation de l'extension :\n\n~~~~\nrails g devise_security_extension:install\n~~~~\n\nLancez ensuite la migration\n\n~~~~\nrails g migration AddSessionLimitableToUsers unique_session_id\n~~~~\nModifiez le fichier de migration pour limiter la taille du champ unique_session_id (and be a good citizen :)\n\n~~~~\nclass AddSessionLimitableToUsers < ActiveRecord::Migration\n  def change\n    add_column :users, :unique_session_id, :string, limit: 20\n  end\nend\n~~~~\n\nLancez la migration\n\n~~~~\nrake db:migrate\n~~~~\n\nModifiez le model User afin d'ajouter l'option ' :session_limitable' à la suite de vos options Devise\n\n~~~~\n# app/models/user.rb\nclass User < ActiveRecord::Base\n  devise :session_limitable # à la suite de vos options existantes et actives\n  ... / ...\nend\n~~~~\n\nC'est terminé.\n\nSi maintenant un utilisateur tente de se connecter depuis un autre navigateur, il en sera informé et sa précédente session sera fermée.\n\n**Bonus**\n\nPour limiter la session d'un utilisateur dans le temps, il suffit d'ajouter l'option Devise :timeoutable et de définir le temps d'inactivité en ajoutant à votre model User avec la méthode suivante :\n\n~~~~\ndef timeout_in\n     15.minutes\nend\n~~~~", date: "2018-06-04 22:00:00", published: true, tag_list: "rails, devise"},
#   {title: "Premiers pas en ReactJS", content: "Premiers pas en React avec comme excervice imposé la réalisation d'une appli qui estime l'autonomie de la Renault ZOE à partir de 3 critères; la vitesse, la témpérature et le niveau de la batterie.    \n\nLa logique est un peu la même qu'avec Angular, mais cette fois le couple Label et Select Range forme un composant Slider mais on utilise ici quelques concepts issus de la programmation fonctionnelle comme la dé\nclaration d'un maximum de constantes ( const x = 1; ) et l'assignation de valeurs à une variable par déconstruction ( const {x,y} = this.props; ).\n\n~~~~\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        \n        super(props);\n        \n        this.state = { \n            charge: 100, \n            speed: 50,   \n            temp: 20,    \n            kms: 380,  \n        }  \n        \n        // on stocke dans des variables d'instance les états sinon \n        // le calcul se fait avec les valeurs avant le onChange !!     \n        // https://medium.freecodecamp.org/functional-setstate-is-the-future-of-react-374f30401b6b       \n        // Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.  \n        this.charge = this.state.charge;\n        this.speed  = this.state.speed;       \n        this.temp   = this.state.temp;    \n        \n        // les valeurs clées\n        this.consommations = { '50': 5.35, '60': 6.83, '70': 8.83, '80': 11.12, '90': 13.82, '100': 17.75, '110': 22.22, '120': 27.33, '130': 32.7 };      \n        this.températures  = { '20': 0, '10': 2.5, '0': 5, '-10': 7.5, '-20': 10};    \n        \n        // on 'binde' la fonction qui se déclenchera sur le changement de valeur des controles \n        this.handleOnChange = this.handleOnChange.bind(this);      \n    }\n\n    handleOnChange(event) {    \n        const key = String(event.target.id);    \n        const value = event.target.value;         \n        \n        // Conserve la valeur du slider (charge/speed/temp)\n        this[key] = value;      \n        \n        // Rafraichir l'affichage\n        this.setState({ [key]: value });   \n        \n        // Rafraichir l'affichage  \n        this.setState({ [key]: value });   \n\n        // Recalculer l'estimation         \n        this.calculate(this.charge, this.speed, this.temp);    \n    }      \n\n    calculate(_charge, _speed, _temp) {  \n        // Calculer la puissance restante  \n        const _puissance = 41; // Batterie ZOE 4.0 (41kW)      \n        const _battery   = _puissance - (_puissance * (100 - _charge) / 100);      \n\n        // Calculer la consommation        \n        const _conso = this.consommations[_speed];   \n        let _autonomie = _battery * (parseInt(_speed) / _conso);         \n\n        // Calculer l'impact de la température ext.  \n        const _impact = this.températures[_temp];    \n        _autonomie  = _autonomie - (_autonomie * _impact / 100);         \n\n        this.setState({ kms: _autonomie });\n    }      \n\n    render() {       \n        const { charge, speed, temp, kms } = this.state;       \n        return (       \n            <div className=\"App\">      \n                <Slider \n                    id=\"charge\"        \n                    label=\"Batterie\" unit=\"%\" min=\"0\" max=\"100\"      \n                    value={charge}     \n                    onChange={this.handleOnChange}         \n                />      \n\n                <Slider \n                    id=\"speed\"         \n                    label=\"Vitesse\" unit=\"km/h\" min=\"50\" max=\"130\"   \n                    value={speed}      \n                    onChange={this.handleOnChange}         \n                />      \n\n                <Slider \n                    id=\"temp\"\n                    label=\"Température\" unit=\"°\" min=\"-20\" max=\"20\"  \n                    value={temp}       \n                    onChange={this.handleOnChange}         \n                />   \n\n                <div id=\"autonomie\">Autonomie: { kms | 0 } kms</div>       \n            </div> \n        );   \n    }      \n}        \n\n// On crée un composant Slider pour éviter de se répéter.... \n\nclass Slider extends Component {       \n    render() {     \n       const { id, label, unit, min, max, value, onChange } = this.props;       \n       return (     \n         <div>\n            <span>{label}: {value}{unit}</span>  \n            <input\n                id   = { id }    \n                min  = { min }   \n                max  = { max }   \n                value= { value } \n                onChange= { onChange }     \n                type = \"range\"   \n                step = \"10\"      \n            />    \n         </div>         \n       ); \n    }    \n}  \n\nexport default App;</pre>    \n\n~~~~\n", date: "2018-11-01 23:00:00", published: true, tag_list: "react"},
#   {title: "Ruby on Rails sur FreeBSD 11", content: "## Comment installer Rails sur un serveur FreeBSD ?\n\nCeux qui voudraient s'émanciper du noyau Linux et goûter à d'autres variétés d'Unix, tout en restant sur PC, ont la possibilité d'installer FreeBSD sur une machine virtuelle (VirtualBox) pour s'essayer à cet Unix très performant, sécurisé, et, finalement, pas si compliqué à utiliser.\n\nLa première chose à faire est de télécharger l'ISO depuis le site officiel, puis de créer une nouvelle machine virtuelle et de booter sur l'ISO.\n\nUne fois FreeBSD démarré, choisissez de l'installer sur le disque de votre machine virtuelle. Ne vous posez pas trop de questions lorsque qu'il s'agit de choisir un bootloader, un format de fichier, etc; les choix proposés par défaut sont parfaits pour une utilisation classique.\n\nUne fois connecté en tant qu'utilisateur root créé, on peut commencer l'installation des paquets nécessaires au fonctionnement de Ruby on Rails, à savoir Ruby, Sqlite3, NodeJS, etc...\n\n\n#### RUBY ON RAILS\n\n~~~~\n\n$ pkg install rubygem-puma\n\n$ pkg install rubygem-sqlite\n\n$ pkg install node\n\n$ gem install bundler\n\n$ gem install rails\n\n$ rails new testapp\n\n$ rake db:migrate\n\n$ rails c  \n\n$ rails s -b IP ou 0.0.0.0\n~~~~\n\n\nVérifier que Rails fonctionne en allant sur http://ip:3000\n\nCelebrate !\n\n\n#### APACHE PASSENGER\n\n~~~~\n$ pkg install rubygem-passenger-apache-5.3.5\n~~~~\n\nUne fois passenger installé, il faut modifier la configuration de Apache pour activer Passenger\n\n~~~~\n$ apachectl -V\n\nHTTPD_ROOT = \"/usr/local\"\n\nSERVER_CONFIG_FILE = \"etc/apache24/httpd.conf\"\n~~~~\n\n~~~~\n\n$ ee /usr/local/etc/apache24/httpd.conf\"\n\nLoadModule passenger_module /usr/local/lib/ruby/gems/2.4/gems/passenger-5.3.5/buildout/apache2/mod_passenger.so\n\nPassengerRoot /usr/local/lib/ruby/gems/2.4/gems/passenger-5.3.5\n\nPassengerRuby /usr/local/bin/ruby24\n\n~~~~\n\n+ uncomment la ligne qui active les VistualHosts\n\n\n#### VirtualHost\n\nAjoutez \"apache24_enable=\"YES\" au fichier /etc/rc.conf (le créer s'il n'existe pas) et redémarrez\n~~~~\n$ apachectl restart\n~~~~\n\nVirtual hosts :\n\nChaque application Rails doit être connue d'Apache. Cette déclaration se fait dans le fichier httpd-vhosts\n\n~~~~\n$ ee /usr/local/etc/apache24/extra/httpd-vhosts.conf\n~~~~\n\nUne configuration classique :\n\n~~~~\n<VirtualHost *:80>\n\n    ServerName bornes-test.philnoug.com\n\n    ServerAdmin philippe.nougaillon@gmail.com\n\n    DocumentRoot /root/rubys/test/bornes/public/\n\n    SetEnv SECRET_KEY_BASE \"0123456789\"\n\n    <Directory /root/rubys/test/bornes/public >\n\n        AllowOverride all\n\n        Options -MultiViews\n\n        Require all granted\n\n    </Directory>\n\n</VirtualHost>\n~~~~\n\nSi le serveur rails ne veut pas se lancer en objectant une erreur \"getaddrinfo\", vous devrez associer votre addresse IP locale à un nom d'hôte, comme suit :\n\n~~~~\n$ ee /etc/hosts\n\n127.0.0.1 freebsd  freebsd.philnoug.com\n\n10.0.2.14 freebsd  freebsd.philnoug.com\n~~~~\n\nIl faut aussi donner un nom à la machine en utilisant la commande hostname\n\n~~~~\n$ hostname -d freebsd.philnoug.com\n~~~~\n\n\n#### SSL\n\nIl est temps maintenant de mettre en place l'accès aux applications via https:/\nLe plus simple est d'utiliser les services de \"Let's Encrypt\", à savoir le certbot qui va nous simplifier la tâche.\n\n\n~~~~\n$ pkg install py27-certbot\n~~~~\n\nAvant de pouvoir créer les certificats il faut demander à Apache de prendre en charge la gestion de SSL au moyen d'un module \"mod_ssl qu'il suffit d'activer dans le fichier de configuration Apache (dé-commentez la ligne LoadModule mod_ssl ...)\n\n~~~~\n$ ee /usr/local/etc/apache24/httpd.conf\n~~~~\n\nPuis activez TTLS en créant ce fichier :\n\n~~~~\n$ ee /usr/local/etc/apache24/modules.d/020_mod_ssl.conf\n\nListen 443\n\nSSLProtocol ALL -SSLv2 -SSLv3\n\nSSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5\n\nSSLPassPhraseDialog  builtin\n\nSSLSessionCacheTimeout  300\n~~~~\n\nAvant de se lancer dans la création du certificat, vérifiez les points suivants :\n\n\n    Le virtual host non HTTPS pour lequel nous allons créer le certificat doit exister dans /usr/local/etc/apache24/extra/httpd-vhosts.conf\n\n    Le host(ServerName) ne doit pointer que vers le serveur sur lequel on lance la création du certificat (supprimer les autres pointages éventuels)\n\n    Apache doit être stoppé :\n\n~~~~\n$ apachectl stop\n~~~~\n\n\nPour créer le certificat, lancez la commande suivante :\n\n~~~~\n$ certbot certonly --standalone -d sousdomaine.domaine.com\n~~~~\n\nEn retour, vous devriez obtenir le message suivant\n\n\n - Congratulations! Your certificate and chain have been saved at:\n\n   /usr/local/etc/letsencrypt/live/sousdomaine.domaine.com/fullchain.pem\n\n   Your key file has been saved at:\n\n   /usr/local/etc/letsencrypt/live/sousdomaine.domaine.com/privkey.pem\n\n   Your cert will expire on 2019-03-05. To obtain a new or tweaked\n\n   version of this certificate in the future, simply run certbot\n\n   again. To non-interactively renew *all* of your certificates, run\n\n   \"certbot renew\"\n\nModifiez maintenant le virtual host pour qu'il écoute le port 443\n\n~~~~\n$ ee /usr/local/etc/apache24/extra/httpd-vhosts.conf\n\n<VirtualHost *:443>\n\n    ServerName sousdomaine.domaine.com\n\n    ServerAdmin philippe.nougaillon@gmail.com\n\n    DocumentRoot /root/rubys/sousdomaine.domaine.com/public/\n\n    SetEnv SECRET_KEY_BASE \"YOURKEY\"\n\n    SSLCertificateFile \"/usr/local/etc/letsencrypt/live/sousdomaine.domaine.com/cert.pem\"\n\n    SSLCertificateKeyFile \"/usr/local/etc/letsencrypt/live/sousdomaine.domaine.com/privkey.pem\"\n\n    SSLCertificateChainFile \"/usr/local/etc/letsencrypt/live/sousdomaine.domaine.com/fullchain.pem\"\n\n\n    <Directory /root/rubys/sousdomaine.domaine.com/public>\n\n        AllowOverride all\n\n        Options -MultiViews\n\n        Require all granted\n\n    </Directory>\n\n</VirtualHost>\n~~~~\n\nLa configuration étant terminée, on peut relancer Apache pour vérifier que tout se passe bien :\n\n~~~~\n$ apachectl restart\n~~~~\n\nPour voir si https est en écoute sur le port 443\n\n~~~~\n$ sockstat -4 | grep http\n~~~~\n\nSi tous les voyants sont au vert, on pourra maintenant accéder aux applications Rails via http://sousdomaine.domaine.com et surtout via https://sousdomaine.domaine.com\n\nVous pouvez utiliser la commande curl pour récupérer le contenu (code source) de la home page de votre application\n\n~~~~\n$ curl https://sousdomaine.domaine.com\n~~~~\n\nou bien, si vous ne souhaitez pas voir le code source mais votre homepage en mode texte, utilisez lynx\n\n~~~~\n$ lynx https://sousdomaine.domaine.com\n~~~~\n\nNotez qu'il existe pléthore de paquets Linux installables sur FreeBSD. Pour savoir si le paquet que vous cherchez est disponible, allez sur la page FreeBSD Ports Search\n", date: "2019-01-05 23:00:00", published: true, tag_list: "rails, freebsd"},
#   {title: "Estimer l'autonomie d'une Renault ZOE en ReactJS & Redux", content: "### Réécriture de l'appli de calcul de l'autonomie d'une ZOE en utilisant cette fois Redux\n\nLors de la réécriture de cette petite application ZOE qui me sert de prétexte à explorer les derniers frameworks web, j'essayais de trouver pour chaque nouveau concept rencontré un équivalent dans la vie réelle, pour mieux le comprendre et l'expliquer, et c'est la métaphore du train électrique s'est imposée.\n\n**Programmation fonctionnelle et transports ferroviaires**\n\nL'analogie entre la programmation fonctionnelle et les transports ferroviaires a déjà été utilisée dans l’excellent [Domain modeling made functional (Tackle Software Complexity with Domain-Driven Design and F#)](https://pragprog.com/book/swdddf/domain-modeling-made-functional) de Scott Wlaschin. L'auteur y associe par exemple une fonction pure avec un segment de voie de chemin de fer qui passerait par un entrepôt (la fonction) dans lequel le chargement du wagon y arrivant serait modifié/transformé avant d'en sortir.\n\nL'analogie avec le rail de chemin de fer vient du fait qu'il n'y a qu'une extrémité de chaque coté du rail et qu'un wagon qui arrive d'un coté doit sortir de l'autre (pure function), ce qui permet ensuite de les relier entre eux pour obtenir des \"Higher-Order Functions” (HOF), c.a.d des fonctions qui ne prennent en entrée ou en sortie que d'autres fonctions pures. Le tout formant un circuit sur lequel les actions de l'utilisateur seraient les locomotives, et les données (états) les wagons.\n\nVous allez me dire que la programmation React/Redux ne peut pas se réduire à la construction d'un circuit de train électrique. Évidement, non. Je n'ai pas envie de me mettre les amateurs de modélisme ferroviaire à dos :) Mais, si ça peut aider à mieux appréhender ce changement de paradigme qu'est la programmation fonctionnelle et son application dans React/Redux, ne nous en privons pas.\n\n**Le Flow React/Redux**\n\nLa façon courante de représenter le flow d'une application React/Redux est celle-ci :\n\n~~~~\nAction=>Dispatcher/Reducer=>Store=>View  \n~~~~\n\nCe qui peut se résumer ainsi; un train, propulsé par une action, va être aiguillé (dispatch) selon sa provenance vers un entrepôt dans lequel son chargement sera transformé (reducer) avant de finir sa course et de livrer son chargement au dépôt, ce qui sera immédiatement signalé sur le grand tableau des arrivées (view) ou tout autre dispositif à l'écoute des arrivées.\n\n\n**Attention au départ !**\n\nOn commence par s'équiper des indispensables outils pour faire du React et Redux, plus quelques gadgets qui nous serons bien utiles chemin faisant (pan pan:).\n\n~~~~\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n~~~~\n\nOn décrit ensuite les actions que peut faire un utilisateur (les trains).\n\n~~~~\n// action types\n\nconst SPEED_UP = 'SPEED_UP';\nconst SPEED_DOWN = 'SPEED_DOWN';\n~~~~\n\nLe contenu des wagons :\n\n~~~~\n// states\n\nconst params = {\n    charge: 100,\n    speed: 80,\n    temp: 20,\n    autonomie: 292,\n};\n~~~~\n\nLes aiguillages :\n\n~~~~\n// dispatcher/reducers\n\nfunction paramsReducer(state = params, action) {\n    switch(action.type) {\n        case SPEED_UP: {\n            return applySpeedUP(state, action);\n        }\n\n        case SPEED_DOWN: {\n            return applySpeedDOWN(state, action);\n        }\n\n        default: return state;\n    }\n}\n~~~~\n\nLes entrepôts de transformation :\n\n~~~~\n// reducers\n\nfunction applySpeedUP(state, action) {\n    const speed = action.params.speed + 10;\n    const autonomie = calculate(action.params.charge, speed, action.params.temp);\n\n    if (autonomie)\n        return {...state, speed, autonomie};\n    else\n        return state;\n}\n\nfunction applySpeedDOWN(state, action) {\n    const speed = action.params.speed - 10;\n    const autonomie = calculate(action.params.charge, speed, action.params.temp);\n\n    if (autonomie)\n        return {...state, speed, autonomie};\n    else\n        return state;\n}\n~~~~\n\nOn accroche enfin les wagons à la locomotive :\n\n~~~~\n// action creators\n\nfunction doSpeedUP() {\n    return {\n        type: SPEED_UP,\n        params: store.getState().paramsState,\n    };\n}\n\nfunction doSpeedDOWN() {\n    return {\n        type: SPEED_DOWN,\n        params: store.getState().paramsState,\n    };\n}\n~~~~\n\nLa partie calcul de l'autonomie :\n\nCette partie devrait être réécrite pour être plus \"pure\".\n\n~~~~\n// Calculations \n\nfunction calculate(charge, speed, temp) {\n\n    const consommations = { '50': 5.35, '60': 6.83, '70': 8.83, '80': 11.12, '90': 13.82, '100': 17.75, '110': 22.22, '120': 27.33, '130': 32.7 };\n    const temperatures  = { '30': -2.5, '20': 0, '10': 2.5, '0': 5, '-10': 7.5, '-20': 10};\n\n    // Puissance restante\n\n    const puissance = 41; // Batterie ZOE 4.0 (41kW)\n    const battery   = puissance - (puissance * (100 - charge) / 100);\n\n    // Consommation \n    const conso = consommations[speed];\n    let autonomie = battery * (parseInt(speed) / conso);\n\n    // Impact de la température extérieure\n    const impact = temperatures[temp];\n    autonomie  = autonomie - (autonomie * impact / 100); \n\n    return autonomie;\n}\n~~~~\n\nOn demande à voir dans la console de tous les changements d'états. Très utile pendant la phase de débogage, à retirer ensuite.\n\n~~~~\n// Logger\n\nconst logger = createLogger();\n\n~~~~\n\nOn pourra combiner les voies de sortie de notre circuit principal avec d'autres circuit éventuels, puis on connecte le tout sur la voie qui mène à notre entrepôt général (le stock).\n\n~~~~\n// Store\n\nconst rootReducer = combineReducers({\n    paramsState: paramsReducer,\n});\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(logger),\n);\n~~~~\n\nIci on construit la partie visible de l'application; le pupitre de commandes et le tableau des arrivées, morceau par morceau.\n\n~~~~x\n// View layer\n\nclass CustomButton extends Component {\n    render() {\n        const { children, onClick } = this.props; \n        return (\n            <button\n                type=\"button\"\n                className=\"btn btn-outline-info\"\n                onClick={ onClick }\n            >\n                { children }\n            </button>\n        ); \n    }\n}\n\nclass CustomButtonBox extends Component {\n    render() {\n        const { children, value, unit, onClickUP, onClickDOWN } = this.props;\n        return (\n            <h3>\n                <small className=\"text-info\">{ children }</small>\n                <br />\n                <div className=\"btn-group\">\n                    <CustomButton onClick={ onClickDOWN }>-</CustomButton>\n                    <span>\n                        { value }\n                        <small>{ unit }</small>\n                    </span>\n                    <CustomButton onClick={ onClickUP }>+</CustomButton>\n                </div>\n            </h3>\n        )\n    }\n}\n~~~~\n\nOn assemble le tout :\n\n~~~~x\nfunction TheApp({ params, onSpeedUP, onSpeedDOWN, onTempUP, onTempDOWN }) {\n    const { speed, temp, autonomie } = params;\n    return (\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <h1>\n                    <small className=\"text-info\">Autonomie</small>\n                    <br />\n                    { autonomie | 0 } km\n                </h1>\n            </div>\n\n            <div className=\"card-body\">\n                <CustomButtonBox\n                    value={ speed }\n                    unit=\" km/h\"\n                    onClickUP={ onSpeedUP }\n                    onClickDOWN={ onSpeedDOWN }>\n                    Vitesse\n                </CustomButtonBox>\n              </div>\n            <div className=\"card-footer\"> </div>\n        </div>\n    );\n}\n~~~~\n\nOn relie l'ensemble avec l'affichage et les commandes :\n\n~~~~\nfunction render() {\n    ReactDOM.render(\n        <TheApp\n            params = { store.getState().paramsState }\n            onSpeedUP   = { () => store.dispatch(doSpeedUP()) } \n            onSpeedDOWN = { () => store.dispatch(doSpeedDOWN()) }     \n        />,\n        document.getElementById('root')\n    );\n}\n~~~~\n\nOn demande à écouter les mouvements dans le store afin de rafraîchir la vue quand une arrivée se produit. Et on affiche une première fois la vue.\n\n~~~~\nstore.subscribe(render);\nrender();\n~~~~\n\n[Sources de l'application](https://github.com/philippe-nougaillon/Relax-en-ZOE)\n\n[Tester l'application](https://relax-en-zoe.herokuapp.com/)\n\n", date: "2019-01-31 23:00:00", published: true, tag_list: "react, redux"},
#   {title: "Ruby 2.7 JIT on Rails", content: "A lieu en ce moment la conférence RailsConf 2019 à Minneapolis. Parmi la multitude de sujets abordés, plusieurs ont retenu mon attention, et plus particulièrement celui-ci :\n\n>## Ruby 2.7 JIT on Rails\nHave you ever tried MRI's JIT compiler in Ruby 2.6? Unfortunately it had not improved Rails application performance while it achieved a good progress on some other benchmarks.\nBeyond the progress at Ruby 2.6, JIT development on Ruby 2.7 will be dedicated to improve performance of real-world applications, especially Ruby on Rails. Come and join this talk to figure out how it's going well and what you should care about when you use it on production.\nTakashi Kokubun. A Ruby committer, who is developing JIT compiler for MRI.\n\nBonne nouvelle, n'est-ce pas ? Quand on sait que c'est Rails qui a fait décoller la popularité de Ruby et que ce dernier souffre d'un serieux problème de performances (voir mon post sur l'impact écologique du développeur), on pourrait se dire qu'il était grand temps :)", date: "2019-05-03 22:00:00", published: true, tag_list: "rails"},
#   {title: "Xamarin", content: "Tu es un jeune développeur ambitieux et tu souhaites développer une application mobile pour devenir (très) riche, \nou, plus humblement, tu travailles pour une entreprise qui a un vrai besoin métier en mobilité ? Pas de doutes, Xamarin est fait pour toi !\n\nEt ça tombe bien car c'est vraiment, il me semble, le bon moment pour s'y metttre. En effet, je regarde de près et depuis de très nombreuses années le développement du projet Xamarin et force est de constater qu'il avance maintenant à grands pas, notamment depuis le rachat de la société Xamarin, qui portait le projet, par Microsoft. Ce rachat s'est accompagné logiquement de la promotion des deux fondateurs à des postes clés chez Microsoft, ce qui a contribué aussi à redonner de la coolitude, de fraîcheur, à cette vieille dame qui s'était endormie sur ses lauriers (Windows/Office) et avait complétement raté le train du mobile.  \n\nLe nombre d'années de gestation peut paraître énorme comparé à des startups dont le time-to-market est de 6 mois, mais il faut dire que le projet Xamarin est vraiment très ambitieux; il s'agit de proposer une solution de développement mobile unique, native et robuste pour toutes les plateformes mobiles du marché (Android, iOS et, accessoirement, Windows 10)... Bref, rien de moins que l'anneau pour les contrôler tous ! Pardonnez du peu :)\n\nMais revenons un instant en arrière pour un peu d'histoire. A l'origine de Xamarin était le [projet Mono](https://www.mono-project.com/), lui-même issu du projet Duplo, si on devait remonter jusqu'à la genèse. Lancé en 2001 par [Miguel de Icaza](https://fr.wikipedia.org/wiki/Miguel_de_Icaza), le projet Mono avait pour but de fournir une implémentation libre et Open Source de la plateforme de développement .NET, lancée quelques années avant par Microsoft pour concurrencer l'omniprésence de JAVA... \nDepuis cette date le projet a connu des fortunes diverses, dont 3 rachats. Mais après presque 20 ans de développement, Xamarin est finalement devenu un des projets phares de Microsoft, qui pourrait bien à son tour s'appuyer sur Xamarin pour revenir dans la course dans le domaine du mobile, logiciellement et matériellement parlant, avec le très prometteur projet [Centaurus](https://www.blog-nouvelles-technologies.fr/160431/microsoft-envisage-un-appareil-double-ecran-tres-allechant/), ce dispositif pliant unique se situant entre le smartphone et la petite tablette avec clavier type Surface GO... Il y a bien là une place à prendre, notamment dans les usages professionnels en mobilité, là où un smartphone est trop petit pour travailler mais une tablette encore trop grande et encombrante.\n\nBon, d'accord, c'est donc le bon moment pour s'y mettre, c'est entendu. Mais on commence par où ?\n\nC'est très simple, jeune padawan ;-) Il te faut d'abord un bon PC à jour ou un Mac afin d'y installer [VisualStudio 2019 Community edition](https://visualstudio.microsoft.com/fr/vs/) et la \"charge de travail\" dénommée 'Développement mobile en .NET'. Prévoir au moins 8 Go de RAM et 10 Go d'espace libre sur votre périphérique de stockage (de préférence un SSD).\n\nUne fois équipé de VisualStudio et prêt à coder, on prend une grande respiration et on rend sur le site d'elearning de Microsoft, Microsoft Learn pour y suivre très attentivement le cursus [Créer des applications mobiles avec Xamarin.Forms](https://docs.microsoft.com/fr-fr/learn/paths/build-mobile-apps-with-xamarin-forms/). Ce cursus est particulierement bien fait, interactif et très progressif, et à l'issue duquel tu devrais y voir plus clair sur le monde Xamarin en général et, pour les plus rapides, être en capacité de développer une petite application mobile  multi-plateformes ! \n\nCette formation permet au passage d'aborder des concepts forts de la conception de logiciel, que sont \nle [Binding](https://fr.wikipedia.org/wiki/Binding), \nles [interfaces](https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/keywords/interface), \nle patron de conception [MVVM](https://fr.wikipedia.org/wiki/Mod%C3%A8le-vue-vue_mod%C3%A8le), \nl'asynchronisme (async/await),\n et, pour finir en beauté, l'[inversion de contrôle (IoC)](https://fr.wikipedia.org/wiki/Inversion_de_contr%C3%B4le).\n\nAutant de concepts indispensables à l'architecture des applications mobiles modernes, robustes et maintenables. Concepts clés que je vais tenter d'expliquer aussi sur ce blog, mais à ma manière, en commençant doucement par un billet sur [l'inversion de contrôle (IoC) et les interfaces](/IoC).", date: "2019-07-17 22:00:00", published: true, tag_list: "xamarin"},
#   {title: "BBC micro:bit", content: "L'apprentissage de la programmation peut se faire en passant par des chemins variés et tout au long de la vie. \n\nMais dans les années 80 c'est toute une génération de développeur qui s'est initié à la programmation sur le tas, à savoir sur la première machine qui leur tombait entre les mains, généralement un micro-ordinateur de type familial grand public comme il en existait des dizaines à cette époque.\n\nUniquement aidé d'un manuel et alors que l'été semblait s'étirer jusqu'à l'infini, on se lancait courageusement dans la folle et mystérieuse aventure que constituait pour les non-initiés la réalisation, par soi-même, d'un petit jeu qui animerait l'écran bien morne du micro-ordinateur. \n\nLe langage universel de l'époque était le fameux Basic. Simple, évolué mais facile à compendre; sa maitrise était indispensable à qui voulait controler vraiment sa machine et faire autre chose qu'acheter des logiciels faits par d'autres.\n\nAu début, on tatonne... Découvrant le pouvoir de chaque instruction une à une, on avance un peu comme dans un voyage initiatique. Et finalement, après avoir passé des heures et des heures à recopier des exemples, à les bricoler, le puzzle se fait plus clair et les morceaux s'assemblent doucement jusqu'à obtenir enfin un petit jeu, certe modeste, mais qui fonctionne. Et surtout on sait pourquoi ! \n\nC'est cette approche qu'a choisi la BBC pour initier les petits collégiens anglais de la génération Z, en leur mettant dans les mains une petite machine [micro:bit](https://microbit.org/fr/) qui permet de démystifier la programmation et de comprendre que coder c'est facile. \n\nAvec les énormes progrès accomplis par l'industrie de l'informatique depuis les 40 ans qui nous séparent des années 80, le micro:bit n'a vraiment plus rien à voir avec son ancêtre le micro-ordinateur d'initiation volumineux et cher. La carte est minuscule. Beaucoup plus puissante et ouverte sur le monde extérieurs grace à de multiples capteurs, et surtout si peu chère (elle ne coute que quelques €) qu'elle devrait se retrouver dans la trousse à crayons de tous les petits sujets de Sa Majesté.\n\n# Un kit d'initiation à la programmation\n\nLe kit d'initiation micro:bit comprend une carte micro:bit, un cable USB et un support de batterie (plus 2 piles LR6-AA) pour utiliser la carte librement, sans être connecté à un PC par l'USB. La carte est équipée d'un êtit afficheur (une matrice 5x5 LEDs), de deux boutons et de différents capteurs tels que température, luminosité, boussole, accélération, et sans oublier les classiques entrées-sorties analogiques/numériques. Une carte micro:bit peut aussi communiquer avec d'autres cartes micro:bit via son propre réseau de courte portée (une sorte de Bluetooth privé) ou avec d'autres dispositifs via le Bluetooth BLE. On le voit ici, les possibilités offertes en terme d'intéractivité sont bien plus intéressantes que les autres offres généralement disponibles sur le marché.\n\nLe plus fort étant la possibilité de coder sur le micro:bit SANS carte micro:bit physique! \nEn effet, la carte micro:bit s'accompagne d'une plateforme web [makecode](https://makecode.microbit.org/), sorte d'environement de développement intégré (EDI), qui comprend un puissant éditeur de block de type Scratch et un émulateur de carte micro:bit permet de voir instantanément le résultat de son dur labeur :)\n\n# Premiers pas, premières lignes de code\n\nPour un premier programme, c'est peut être un peu compiqué mais l'idée ici est de reproduire un lancé de dé. L'utilisateur devra secouer la carte pour provoquer le lancer du dé; une petite animation à durée aléatoire s'affichera afin de donner un peu de suspense et enfin le dé s'arretera sur une face pour révéler un nombre de 1 à 6...\n\nCe petit exemple d'application permet d'aborder la notion de nombre aléatoire, de variable, de boucle, de test conditionnel, et enin de fonction. En somme, les bases de la programmation impérative.\n\n<div style=\"position:relative; height:calc(700px + 10em); width:100%; overflow:hidden;\">\n    <iframe style=\"position:absolute;top:0;left:0;width:100%;height:100%;\" src=\"https://makecode.microbit.org/---codeembed#pub:_769b3W7kuekA\" allowfullscreen frameborder=\"0\" sandbox=\"allow-scripts allow-same-origin\"></iframe>\n</div>\n\nPour lancer le simulateur, cliquez sur le bouton > (Play) pour faire apparaitre la carte micro:bit. Secouer là en cliquant sur le bouton 'Shake'. Faite un pari sur le nombre qui va sortir, c'est plus drôle !\n\nVoir le [Jeu de dé](https://makecode.microbit.org/19249-78597-20950-88514) sur MakeCode.\n\nIl existe pléthore de cartes à microcontrolleur de type Arduino, me direz-vous, mais ce qui fait ici la différence c'est la cohérence et la richesse de l'offre matérielle/logicielle; il faut bien avouer que l'on n'a rarement vu kit d'initiation ausi stimulant. \n\nChapeau bas la BBC !\n\n", date: "2019-08-01 22:00:00", published: true, tag_list: "javascript"},
#   {title: "ERLANG => L'effet 'E'", content: "Il y a des rencontres qui changent la vision d'un développeur et ma rencontre avec Erlang est une de celles-là. \n\nDéveloppeur Ruby on Rails depuis presque 10 ans, j'ai souffert des piètres performances de Ruby (mais moins que mes clients) lorsque les applications déployées étaient victimes de leurs succès et que les volumes traités passaient de quelques centaines de lignes à plusieurs millions.\n\nOh ! que la déception était grande quand, après avoir monter la solution en seulement quelques semaines, gràce aux facultés haut niveau de Ruby et du langage spécifique au domaine (DSL) qu'est Rails, on commençait justement à regretter qu'il soit si haut niveau.\n\nPlus bas niveau, les traitement iraient bien plus vite ! Au lieu de quoi, ça se trainait à une allure de sénateur quand les choses deviennaient plus complexe et massive.\n\nFinalement le problème n'est pas tant Ruby que le paradigme sur lequel le langage a été construit; la programmation séquentielle orientée objet. Rien que ça, me direz-vous...\n\nEt bien oui, il faut dire les choses. D'ailleurs je vous signale qu'à partir de maintenant continuer la lecture devient dangereux.\n\nD'abord illuminons-nous des mots de Joe Amstrong ('Hello Jo!'): \n\n\"Le monde réel, celui qui réside en dehors de nos ordinateurs, est indéniablement concurrent. Les choses s'y produisent en parallèle et notre existence même repose sur les intéractions complexes d'un très grand nombre d'activités concurrentes. Cette simple observation conduit au paradoxe suivant: tandis que les activités s'organisent dans notre monde de manière parallèle, les langages que nous utilisons pour modéliser, décrire et transcrire cette réalité en programmes sont essentiellement séquentiels.\n\nLe développement en Erlang enseigne au programmeur une nouvelle manière de considérer le monde, en l'obligeant à analyser les problèmes auxquels il est confronté en termes de processus concurrents et de messages échangés entre ces processus.\n\nUn programme Erlang est composé d'un nombre arbitraire de processus qui s'éxecutent en parallèle. Ces processus interagissent en échangeant des messages. C'est même là la seule façon pour eux d'interagir. En outre, leur espace d'execution n'est pas limité à une seule machine: il peut s'etendre à un noeud Erlang quelconque situé sur l'Internet...\"\n\nJoe AMSTRONG. Swedish Institute of Computer Science, Stockholm, janvier 2003.\n\nIl faut dire que ce monsieur Amstrong en connait long sur la question. Il est l'un des trois concepteurs d'Erlang (Jim, Mike, Joe), immortalisés dans une vidéo promotionnelle d'Ericsson, la société qui utilisait alors Erlang pour animer le coeur de ses routeurs et centraux téléphoniques, et qui restera dans les annales autant pour ses dialogues élaborés ('Hello Mike.' -> 'Hello Jo.') que pour son jeu d'acteurs :). Je vous laisse apprécier: https://www.youtube.com/watch?v=xrIjfIjssLE\n\nEn plus d'être distrayante, cette vidéo démontre les capacités d'Erlang à se mettre à jour \"à chaud\", ce qui représentait pour l'époque une sacrée prouesse technique.\n\nAlors de quoi parle-t-on ? D'un langage, d'un OS, d'un middleware, une VM, un paradigme ? Et bien, c'est tout ça à la fois. Je cite: \"Erlang à fait le choix d'un modèle de développement fonctionnel (vs objet) pour des raisons de performance et de constance dans les temps de réponse de l'application. En effet, dans un langage objet, la superposition des couches objet à travers le mécanisme d'héritage peut pénaliser les temps de réponse. Or Erlang est conçu pour être un langage temps réel mou.\" (Mikael Rémond. 2003)\n\nOn pourrait penser que ce langage est resté confidentiel mais ce n'est pas du tout le cas. WhatsApp, Slack, pour ne citer qu'eux, l'ont placé au coeur de leurs systèmes de communication (tiens, on y revient) pour ses performances, sa capacité à monter en charge aisement et sa résistance aux pannes.", date: "2020-01-05 23:00:00", published: true, tag_list: "erlang, elixir, phoenix"},
#   {title: "Transformer sa Freebox Delta en serveur Ruby on Rails", content: "Avec l'apparition de la gestion des VMs dans la dernière version majeure de freeboxOS (4.1), il devient tout à fait envisageable de transformer son serveur FreeBox Delta en un petit serveur Rails qui vous rendra bien des services.\n\nL'investissement initial est mimimum; une barrette de 8Go (environ 35€)  \nCrucial CT8G4SFS824A 8Go (DDR4, 2400 MT/s, PC4-19200, Single Rank x8, SODIMM, 260-Pin).\nOn pourra ensuite ajouter un disque dur supplémentaire pour activer le mode RAID et ainsi avoir un mimium de sécurité sur le stockage.\n\nUne fois la barrette installée, il suffit d'aller sur http://mafreebox.freebox.fr, puis dans VMs pour commencer la création du serveur.\n\n## Créer une VM\n\nDans VMs, choisissez 'Ajouter une VM', placez le curseur CPU sur 2 et augmentez la quantité de RAM à son maximum.\n\nCochez 'Choisir un système d'exploitation pré-installé', puis 'Ubuntu 20'. Il faut ensuite coller votre clé publique qui se trouve dans .ssh/id_rsa.pub. Si vous n'en vez pas, créez en une avec ssh-keygen.\n\nUne fois la nouvelle VM créée, il faut aller dans 'Réseau' pour créer un bail statique pour cette nouvelle VM. Une adresse IP sera proposée, il suffit de valider.\n\n## Se connecter à la VM\n\nSi la VM démarre correctement (vous pouvez voir les messages de boot en activant la 'console') pour devriez pouvoir vous connecter comme suit: \n\n~~~~\n$ ssh freebox@192.168.0.45\n~~~~\n\n## Installer Rails et ses pré-requis\n\nPour installer Rails, procédez de la manière habituelle: \n\nMise à jour des paquets\n~~~~\n$ sudo apt-get update\n$ sudo apt-get upgrade\n~~~~\n\n### NodeJS\n\nInstallation de ce complément devenu indispensable, NodeJS\n\n~~~~\n$ sudo bash nodesource_setup_10.sh\n\n$ curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh\n\n$ sudo bash nodesource_setup.sh\n\n$ sudo apt-get install nodejs\n\n$ nodejs -v\n~~~~\n\n### Ruby 2.6\n\nIci on installe Ruby depuis les sources. Ce n'est pas le plus simple mais c'est plus économique et optimisé. On peut préférer l'installation de RVM, le gestionnaire de versions de Ruby. A vous de voir.\n\n~~~~\n$ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\n\n$ echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n\n$ sudo apt update && sudo apt install yarn\n\n$ sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev libsqlite3-dev\n\n$ wget https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.0.tar.gz\n\n$ tar -xzvf ruby-2.6.0.tar.gz \n\n$ cd ruby-2.6.0/\n\n$ ./configure\n\n$ make\n\n$ sudo make install\n\n$ ruby -v\n~~~~\n\n### Rails 6.0\n\n~~~~\n$ sudo gem install rails\n~~~~\n\n### Unicorn\n\n~~~~\n$ mkdir RailsApps\n\n$ cd RailsApps/\n\n$ rails new testapp\n\n$ cd testapp/\n\n$ sudo gem install unicorn\n\n$ nano config/unicorn.rb\n~~~~\n\nle fichier unicorn.rb doit ressembler à ça: \n\n~~~~\n# set path to the application\napp_dir = File.expand_path(\"../..\", __FILE__)\nshared_dir = \"\#{app_dir}/shared\"\nworking_directory app_dir\n\n# Set unicorn options\nworker_processes 2\npreload_app true\ntimeout 30\n\n# Path for the Unicorn socket\nlisten \"\#{shared_dir}/sockets/unicorn.sock\", :backlog => 64\n\n# Set path for logging\nstderr_path \"\#{shared_dir}/log/unicorn.stderr.log\"\nstdout_path \"\#{shared_dir}/log/unicorn.stdout.log\"\n\n# Set proccess id path\npid \"\#{shared_dir}/pids/unicorn.pid\"\n~~~~\n\nMaintenant il faut créer quelques répertoires qui seront utiles plus tard\n~~~~\n$ mkdir -p shared/pids shared/sockets shared/log\n~~~~\n\n### NGINX   \n\n~~~~   \n$ sudo apt-get install nginx\n\n$ sudo nano /etc/nginx/nginx.conf \n\n$ sudo rm /etc/nginx/sites-enabled/default\n\n$ sudo nano /etc/nginx/sites-available/testapp\n~~~~\n\nle fichier testapp doit contenir la configuration de site comme suit: \n\n~~~~\nserver {\nlisten 80;\nserver_name testapp.philnoug.com;\n\nroot /home/freebox/RailsApps/testapp;\n\ntry_files $uri/index.html $uri @rails;\n\nlocation @rails {\n   proxy_pass http://rails;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n   proxy_redirect off;\n}\n\nerror_page 500 502 503 504 /500.html;\nclient_max_body_size 4G;\nkeepalive_timeout 10;\n}\n~~~~\n\nOn peut maintenant activer le site et relancer Nginx\n\n~~~~\n$ sudo ln -s /etc/nginx/sites-available/testapp /etc/nginx/sites-enabled\n\n$ sudo service nginx restart\n\n~~~~\n\n~~~~\n$ cd RailsApps/testapp/\n\n$ sudo unicorn -c config/unicorn.rb -E development -D\n~~~~\n\nEt voilà ! Chapeau bas si vous êtes arrivé jusque là ! Bravo :o)\n\n\nPS: Notez que si voulez que votre site soit accesible depuis internet, il va vous falloir une IP fixe V4. Heureusement chez Free il suffit d'en faire la demande depuis le portail Free, rubrique 'Mon compte'.\n\n", date: "2020-02-13 23:00:00", published: true, tag_list: "rails, server, freebox"},
#   {title: "Migration vers Rails 6.0.3 & Ruby 2.7", content: "Vous avez des applications Rails qui commencent à rouiller et vous souhaitez leurs donner un peu de modernité avec une belle carrosserie neuve ? Avec la sortie de Ruby 2.7 et de Rails 6, franchir le pas vaut vraiment le coup. Ce nouveau Ruby est plus rapide et surtout Rails 6 permet d'intégrer facilement des morceaux de React, Stimulus, etc. pour en améliorer l'intéractivité. Quant à Webpack, il facilite l'emploi de bibliothèques externes comme Bootstrap. \n\nLe moyen le plus simple pour migrer vers une version majeur de Rails semble être la création d'une nouvelle application, puis la copie des éléments signifiants de l'ancienne vers la nouvelle.\n\nLes instructions qui suivent servent à migrer une application qui utilise Bootstrap pour la déco.\n\n### Création de la nouvelle application Rails 6.0.3 & Ruby 2.7\n\n~~~~\n$ rvm rvm use 2.7.0\n$ gem install rails -v 6.0.3\n$ rails new monApplicationToutePimpante --version=6.0.3\n$ cd monApplicationToutePimpante\n~~~~\n\n### Bootstrap\n\n~~~~\n$ yarn add bootstrap\n$ yarn add jquery popper.js\n~~~~\n\n~~~~\n# app/javascript/packs/application.js\nimport \"jquery\";\nimport \"popper.js\";\nimport \"bootstrap\";\n~~~~\n\n~~~~\n# In app/javascript/stylesheets/application.scss\n@import \"~bootstrap/scss/bootstrap\";\n~~~~\n\n~~~~\n# In app/javascript/packs/application.js\nimport \"../stylesheets/application\";\n~~~~\n\n### Font Awesome\n\n~~~~\n$ yarn add @fortawesome/fontawesome-free \n~~~~\n\n~~~~\n// app/javascript/stylesheets/application.scss\n@import '@fortawesome/fontawesome-free';\n~~~~\n\n~~~~\n// app/javascript/packs/application.js\nimport \"@fortawesome/fontawesome-free/js/all\";\n~~~~\n\nPour intégrer facilement FA dans les vues\n\n~~~~\ngem 'font_awesome5_rails'\n~~~~\nCe qui permet ensuite d'utiliser fa_icon :\n\n~~~~\n<%= fa_icon \"baby\", text: \"BB\", class: 'mx-2', size: '3x' %>\n~~~~\n\n\n### Transfert de l'application vers sa nouvelle carrosserie Rails 6\n\n~~~~\n$ cp ../monAncienneApplicationQuiRouille/README.md .\n$ cp -R ../monAncienneApplicationQuiRouille/app/ .\n$ Copier dans le nouveau fichier Gemfile les gems spécifiques à l'ancienne application\n~~~~\n\n### La base de données\n\n~~~~\n$ cp ../monAncienneApplicationQuiRouille/config/database.yml config\n$ cp ../monAncienneApplicationQuiRouille/db/schema.rb db\n$ cp -R ../monAncienneApplicationQuiRouille/db/migrate/ db\n$ rails db:setup\n~~~~\n\n### Les fichiers de configuration\n\n~~~~\n$ cp ../monAncienneApplicationQuiRouille/config/routes.rb config\n$ cp ../monAncienneApplicationQuiRouille/config/initializers/devise.rb config/initializers/\n$ cp ../monAncienneApplicationQuiRouille/config/locales/* config/locales/\n$ copie des éléments spécifiques dans config/application.rb\n~~~~\n\nVoilà, c'est fait. Bravo. Vous êtes maintenant l'heureuse développeur d'une application qui va pouvoir évoluer facilement et suivre la mode des intéractions coté client, à la React.\n\nEnjoy !", date: "2020-05-08 22:00:00", published: true, tag_list: "rails, ruby"},
#   {title: "Stimulez vos pages Rails avec Stimulus", content: "On connaît la capacité de Rails à gérer simplement les base de données qui se cachent derrière les applications les plus complexes et sur lesquels s'appuient les process métiers. Avec l'expérience, cette complexité peut assez facilement être domptée avec l'aide d'ActiveRecord, d'ActiveJob et d'ActiveStorage. \n\nMais dès qu'il s'agit de remonter dans les couches ISO et de s'occuper de la plus haute, la présentation, on est un peu paumé si le client demande des interactions fluides (sans rechargement de la page) à la mode comme avec les applications React. C'est là que le casse-tête commence... Que faire ? Apprendre React et développer la partie frontale 'le Client' et reléger Rails à fournir su JSON au front et gérer le backend ?\n\nCe dilemme n'est plus depuis la V6 de Ruby on Rails qui épouse et embrasse webpacker, ce qui va nous permettre d'intégrer facilement des outils comme React ou Stimulus, et ainsi rendre interactives nos pages Rails sans se prendre la tête avec les multiples bibliothèques JQuery intégrées aux forceps, comme par le passé.\n\nAujourd'hui c'est donc de Stimulus que je vais vous parlez. \n\nIl a été conçu par l'équipe Basecamp à qui l'on doit la constante évolution de Rails, grâce au cercle vertueux Produit <=> Framework et à ses 3 millions d'utilisateurs.\n\nStimulus permet de rendre de petits services mais n'est pas comparable à React car son domaine de prédilection est réduit à la page qu'il contrôle et il ne permet pas de créer de composant, ni d'application. \n\nLa contre-partie est qu'il est simple à installer, à comprendre, et donc à prendre en main.\n\nPrenons un exemple pratique; vous affichez une liste d'éléments et vous voudriez que l'utilisateur puisse en sélectionner certains éléments et afficher alors une liste déroulante proposant des actions à faire subir à cette collection d'éléments cochés, comme par exemple 'Envoyer', 'Supprimer', etc...\n\nPour ce faire nous allons utiliser un contrôleur nommé 'action', une action 'click' et deux 'targets'; la cache à cocher qui sélectionne un élément ('source')et la liste des actions possibles ('selector').\n\nC'est parti !\n\n(Vérifiez que l'application Rails sur laquelle vous travaillez est bien en version 6.0.x, sinon ce n'est pas la peine d'aller plus loin.)\n\nOn installe Stimulus comme suit :\n\n~~~~\n$ rails webpacker:install:stimulus\n~~~~\n\nPuis on ajoute notre controlleur dans app/javascript/controllers (ex: action_controller.js)\n\n~~~~\nimport { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n    static targets = [ \"source\", \"selector\" ]\n\n    initialize() {\n        this.selectorTarget.style.visibility = \"hidden\";\n    }\n\n    connect() {\n        console.log(\"Hello, Stimulus!\", this.element)\n    }\n    click() {\n        var check_boxes = this.sourceTargets;\n        var enabled = check_boxes.filter(myFunction);\n        \n        function myFunction(value, index, array) {\n          return value.checked;\n        } \n \n        if (enabled.length == 0) {\n            this.selectorTarget.style.visibility = \"hidden\";\n        } else {\n            this.selectorTarget.style.visibility = \"visible\";\n        }\n    }\n}\n\n~~~~\n\nDans la vue, on ajoute cette directive qui a pour but de déclarer que cette région est maintenant contrôlée par le bien nommé controlleur 'action'.\nNotez que comme plusieurs controlleurs peuvent être actifs dans une même région, on ajoutera le nom du controlleur devant le nom de l'élément utilisé par ce controlleur. ex: 'action.source'\n\n~~~~\n<div data-controller=\"action\">\n~~~~\n\nDans le 'partial' qui affiche l'élément de la collection à afficher, ici une facture, on ajoute la case à cocher qui contient l'action:\n\n\n~~~~\n<td>\n    <span data-action=\"click->action#click\">\n        <%= check_box_tag \"[ids][\#{facture.id}]\", 'yes', false,  data: {\"target\":\"action.source\"} %>\n    </span>\n</td>\n~~~~\n\nEn fin de région controllée, ajouter le selecteur d'actions\n\n~~~~\n\n<%= select_tag :action_name, \n                options_for_select(['Envoyer', 'Supprimer']), \n                include_blank: true, \n                onchange: 'this.form.submit()', \n                data: {\"target\": \"action.selector\"} %>\n~~~~\n\nEt voilà, le tour est joué !\n\nLa liste des actions est cachée au chargement de la page et ne s'affiche que s'il y a au moins un élément coché.\n\nOn voit ici toute la simplicité et l'intérêt de Stimulus, qui s'intègre très naturellement dans du code existant.\n", date: "2020-06-11 22:00:00", published: true, tag_list: "rails, ruby, stimulus"},
#   {title: "Controller, Concern, Model, Service ?", content: "## Une façon simple pour savoir où mettre son code\n\nVous-vous êtes surement déjà posé cette question; quel est le meilleur endroit pour mettre ce bout de code Ruby ? Dans une application Rails, il y a le choix et cette question peut être résolue en utilisant cette règle simple (qui n'est pas de moi) :\n\n### Does your code handle routing, params or do other controller-y things?\n\nIf so, don’t use a service object — your code belongs in the controller.\n\n### Are you trying to share your code in different controllers?\n\nIn this case, don’t use a service object — use a concern.\n\n### Is your code like a model that doesn’t need persistence?\n\nIf so, don’t use a service object. Use a non-ActiveRecord model instead.\n\n### Is your code a specific business action? (e.g., “Take out the trash,” “Generate a PDF using this text,” or “Calculate the customs duty using these complicated rules”)\n\nIn this case, use a service object. That code probably doesn’t logically fit in either your controller or your model.\n", date: "2020-09-03 22:00:00", published: true, tag_list: "rails, ruby"},
#   {title: "Utiliser plusieurs canaux Action Cable  ", content: "## Action Cable != Broadcast\n\nDepuis Rails 5 les développeurs Rails peuvent utiliser un mécanisme de Pub/Sub pour mettre à jour des pages dynamiquement. Le scénario classique est l'affichage d'un tableau de bord avec moultes calculs et graphiques qui montrent le résultat des ventes d'un produit. Imaginer que pendant que vous regarder ce magnifique tableau, un commercial enregistre une grosse commande. Il faudrait rafraichir le tableau pour la voir apparaitre puisqu'elle a eu lieu après le calcul et l'affichage des résultats des ventes... \n\nMais ça c'était avant. En effet Action Cable permet d'abonner le tableau de résultats à tout changement ayant lieu dans les ventes. Quand ce changement a lieu, il suffit de diffuser le nouveau contenu pour que les pages abonnées soient averties de la mise à jour et remplace leur contenu par le nouveau contenu reçu.\n\nPour que ce soit plus clair, rien ne vaut un exemple concret et son code. \n\nNous allons créer une liste de produits (nom, catégorie, prix) et une page qui devra afficher la somme des prix des produits appartenants à une des catégorie.\n\nSi tout fonctionne bien, la page 'Dash' affichant la somme des produits 'A' sera actualisée si vous modifiez, dans une autre page, le prix d'un des produits de la même catégorie.\n\nAllez, au boulot !\n\n~~~~\n$ rails new testActionCableApp\n$ cd testActionCableApp\n$ rails g scaffold Product name category price:integer\n$ rails db:migrate\n~~~~\n\nAjouter maintenant des produits sans oublié la catégorie !\nUne fois le catalogue produits bien rempli, nous allons créer le \"Dashboard\" et brancher les câbles.\n\n~~~~\n$ rails g controller Dash index\n$ rails g channel products\n~~~~\n\nModifiez comme ci-dessous les fichiers suivants\n\n~~~~\napp/views/dash/index.html.erb\n\n<h1>Dash</h1>\n\n<p>\n    <%= form_tag \"index\", method: 'get' do %>\n        <%= label_tag(:category, \"Category:\") %>\n        <%= text_field_tag :category, @category %>\n        <%= submit_tag(\"Search\") %>\n    <% end %>\n</p>\n\n<div id=\"sum-panel\" \n     data-channel-subscribe=\"products\" \n     data-category=\"<%= @category %>\">\n\n    <h2>\n        <%= \"Total catégorie '\#{ @category }' = \#{ @sum }\" %> \n    </h2>\n\n</div>\n\n~~~~\n\nCette petite page est constituée d'un formulaire dans lequel l'utilisateur viendra saisir la catégorie pour laquelle il veut afficher le total des prix.\n\n~~~~\napp/controllers/dash_controller.rb\n\nclass DashController < ApplicationController\n  def index\n    unless params[:category].blank?\n      @category = params[:category]\n\n      @sum = Product\n                .where(category: @category)\n                .sum(:price)\n    end\n  end\nend\n~~~~\n\nIci on calcule la somme des prix pour la catégorie choisie par l'utilisateur\n\n\n~~~~\napp/channels/products_channel.rb\n\nclass ProductsChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from \"category_\#{ params[:category] }\"\n  end\n\n  def unsubscribed\n    # Any cleanup needed when channel is unsubscribed\n  end\nend\n~~~~\n\nOn souscrit au canal Produits. Les flux sont nommés par le nom de la catégorie (ex: 'categoy_A').  \n\n\n~~~~\napp/javascript/channels/products_channel.js\n\nimport { logger } from \"@rails/actioncable\";\nimport consumer from \"./consumer\"\n\n$(document).on('turbolinks:load', function () {\n  consumer.subscriptions.create(\n    {\n      channel: \"ProductsChannel\",\n      category: $('#sum-panel').attr('data-category')\n    }\n    , {\n    connected() {\n      // Called when the subscription is ready for use on the server\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      // Called when there's incoming data on the websocket for this channel\n\n      const dashElement = document.querySelector(\"main.dash\")\n\n      if (dashElement) {\n        dashElement.innerHTML = data.html\n      }\n\n    }\n  });\n})\n~~~~\n\nC'est ici que ça devient intéressant car on soucrit à un flux nommé. Sinon, toutes la pages abonnées recevraient le même contenu, quelque soit la catégorie choisie par l'utilisateur.\n\nCette information est obtenue en allant lire dans la page les données sum-panel.data-category\n\n\n~~~~\napp/controllers/products_controller.rb\n\n  # PATCH/PUT /products/1\n  # PATCH/PUT /products/1.json\n  def update\n    respond_to do |format|\n      if @product.update(product_params)\n        format.html { redirect_to @product, notice: 'Product was successfully updated.' }\n        format.json { render :show, status: :ok, location: @product }\n\n        @category = @product.category\n        @sum = Product\n                  .where(category: @category)\n                  .sum(:price)\n\n        ActionCable.server.broadcast \"category_\#{ @category }\",\n                            html: render_to_string('dash/index', layout: false)\n\n      else\n        format.html { render :edit }\n        format.json { render json: @product.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n~~~~\n\nIl ne reste plus qu'à envoyer dans le tuyaux le nouveau contenu qui devra apparaître dans toutes les pages abonnées. \n\nEffet 'waouh!' garanti ;-)\n\n\n\n", date: "2020-09-27 22:00:00", published: true, tag_list: "rails, ruby, action_cable"},
#   {title: "Spree, la Marketplace Ruby qui monte, qui monte...", content: "# Marketplace ?\n\nLa crise du COVID et le confinement ont boosté le recours aux plateformes de 'E-commerce' (Markeplace) pour les achats courants. Le grand gagnant semble être Amazon dont la logistique est tellement efficace que certains clients casaniers aimeraient bien qu'Amazon livre aussi les croissants, le dimanche matin, histoire de pouvoir continuer à traïner dans son chez soi, en peignoir, toute la journée. Il faut dire qu'on s'habitue !\n\nLes commerçants à la recherche d'une plateforme pour mettre en vente leurs produits en ligne, sans intermédiaire et sous leur propre marque, s'orienteront vers les services en ligne comme Prestashop ou Shopify, mais ces services, certe faciles à mettre en oeuvre, peuvent rapidement se révéler chers à l'usage.\n\nPourtant la mise en place d'une Marketplace n'est pas si compliquée, surtout si on connait déjà un peu Ruby et Ruby on Rails, car il existe [Spree](https://spreecommerce.org/).\n\nSpree propose l'ensemble des services dont a besoin un site marchand digne de ce nom, plus une interface moderne et un backoffice facile à prendre en main.\n\n# Installation de Spree\n\nAssurez-vous d'être sous Ruby 2.7.2 avant créer l'application Rails qui contiendra votre 'shop' :\n\n~~~~\n$ ruby -v\nruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]\n~~~~\n\nCréee maintenant l'application Rails qui va contenir le 'shop' :\n~~~~\n$ rails new shop\n$ cd shop\n~~~~\n\nEditer votre fichier Gemfile pour y ajouter les modules Spree suivants : \n\n~~~~\ngem 'spree', github: 'spree/spree'\ngem 'spree_auth_devise', github: 'spree/spree_auth_devise'\ngem 'spree_gateway', github: 'spree/spree_gateway'\ngem 'spree_i18n', github: 'spree-contrib/spree_i18n'\n~~~~\n\nL'installation va se faire à partir des sources afin d'obtenir à la toute dernière version, la plus à jour possible.\n\n~~~~\n$ bundle install\n~~~~\n\nIl faut maintenant lancer le script d'initialisation de Spree au terme duquel vous pourrez vous connecter à votre Marketplace fraïchement créée. \n~~~~\n$ rails g spree:install\n~~~~\n\n# Pour passer Spree en Français\n\nRien de plus simple; modifiez le fichier config/application.rb pour y ajouter la ligne suivante : \n\n~~~~\nconfig.i18n.default_locale = :fr\n\n~~~~\n\n# Pour gérer plusieurs Marketplace avec un seul Backoffice\n\nSi vous souhaitez présenter vos produits dans différentes vitrines en ligne sans avoir à gérer plusieurs stocks, il faut activer le mode 'multi_domain'. \n\nPour se faire, ajoutez le gem suivant dans votre Gemfile :\n\n~~~~\ngem 'spree_multi_domain', github: 'spree-contrib/spree-multi-domain'\n~~~~\n\nEt initialisez le mode avec la commande suivante : \n\n~~~~\n$ rails g spree_multi_domain:install\n~~~~\n\nA l'issue de cette configuration vous aurez accès à la création de 'Store' supplémentaire depuis l'interface d'administration et chaque produit pourra être visible sur le 'Store' de votre choix.\n\nBonnes ventes et joyeux Noël !\n\n\n\n\n\n\n\n\n", date: "2020-12-08 23:00:00", published: true, tag_list: "rails, ruby, spree, marketplace"},
#   {title: "Installer Ruby on Rails sur Ubuntu 16.04", content: "### Installer Ruby on Rails (RoR) sur une Ubuntu 16.04 toute fraîche\n\nPour installer RoR sur une distribution fraichement installée, le plus pratique est de commencer par installer l'outil rvm (Ruby Version Manager) qui va simplifier l'installation de Ruby et vous donner le choix de la version à utiliser, ce qui plus tard, vous permettra de passer très facilement à une version à une autre (plus récente).\n\n~~~~\n$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 \n\n$ curl -sSL https://get.rvm.io | bash -s stable \n\n$ source ~/.rvm/scripts/rvm \n\n$ rvm list known \n\n$ rvm install 2.4.0\n\n$ rvm use 2.4.0 --default\n\n$ ruby -v \n~~~~\n\nMaintenant que Ruby 2.4 est correctement installé, passons à l'installation du framework Rails, qui est constitué d'un grand nombre d'éléments, rassemblé dans un seul paquet (un.e Gem). Pour installer ce.tte gem il faut d'abord installer le gestionnaire de paquets Ruby, comme ceci :\n\n~~~~\n$ gem install bundler \n~~~~\n\nIl faut aussi le moteur NodeJS pour que Rails puisse exécuter du code Javascript :\n\n~~~~\n$ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n\n$ sudo apt-get install -y nodejs \n~~~~\n\nInstallons Rails à proprement dit. Pour installer la version la plus récente :\n\n~~~~\n$ gem install rails\n~~~~\n\nPour installer une version spécifique :\n\n~~~~\n$ gem install rails -v 4.2.8\n~~~~\n\nVous voilà maintenant sur les rails pour créer des applications avec le plus riche et le plus cool des framework de développement Web !\n", date: "2018-04-22 22:00:00", published: true, tag_list: "rails, ubuntu"},
#   {title: "Impact énergétique", content: "## Code optimisé = Impact énergétique maitrisé \n\nLe développement d'une nouvelle solution logicielle commence souvent par le codage rapide, en utilisant un framework web, du produit minimum viable (MVP). Une fois ce noyau de base en place, on développe ensuite, au pas de charge (le business n'attend pas) de nouvelles fonctionnalités qui viennent étendre le domaine d'action de cette solution. \n\nLes mois passent et les volumes augmentent, la solution atteint enfin son rythme de croisière. On commence alors à souffler et à prendre un peu de recul mais de nouvelles préoccupations se font jour; les temps de réponses s'allongent, la consommation mémoire est impressionnante et la bande passante est bien remplie et les CPU aux taquets. \n\nComme du coté business, tout va bien, la prod tourne à fond, les transactions sont assurées et tout le monde est content. Ce n'est surtout pas le moment d'y toucher !\n\nMais coté environnemental, c'est la catastrophe ; le serveur est une vraie chaudière et son expoitation coûte de plus en plus cher.  \n\nLe \"Time to market\" accéléré offert par un framework comme Ruby on Rails, et un codage rapide ont des effets de bords qui deviennent vite préoccupants. \n\nMais voir conscience de la consommation énergétique d'un serveur dans le cloud est difficile car les indicateurs proposés sont généralement le temps CPU, la mémoire, les disques. Ils fournissent les métrics clés mais hélas pas d'indicateur de température ou de sa consommation en kWh. Dommage !\n\nDommage car un code optimisé, une stack performante, une bonne séparation des domaines entre le client et le serveur permettent de soulager la machine, de mieux satisfaire les utilisateurs et de faire baisser l'impact environnemental de la solution. \n\nUne [étude](https://www.developpez.net/forums/d1958332/general-developpement/debats-developpement-best-of/programmation-etude-revele-langages-plus-voraces-energie/), \nen date du début 2019, révèle les langages les plus voraces en énergie.\n\nEt les résultats ne sont pas beaux à voir pour les langages WEB et tout particulièrement pour Ruby. Pensez que, d'après cette étude, un même code est 70 fois moins performant en Ruby qu'écrit en C et qu'il occupe 60 fois plus de place en mémoire... Imaginez ce que ça peut donner quand le code n'est pas optimisé !\n\nLes développeurs Ruby ayants déjà été confrontés à ces problématiques connaissent l'ouvrage [\"Ruby Performance Optimization\" d'Alexander Dymo](https://pragprog.com/book/adrpo/ruby-performance-optimization)\n, c'est un must read !\n", date: "2019-04-03 22:00:00", published: true, tag_list: "rails, ruby"},
#   {title: "Le NeXT, dernier des Pharaons", content: "# Quels sont les secrets d'une telle longévité ?\n\nA l'occasion d'un tri dans ma bibliothèque, je suis retombé sur cet ouvrage de fulgarisation des fondations de ce qui allait bientôt transformer Apple en poule aux oeufs d'or. \n\n![The NeXTSTEP Advantage](/THE-NeXT-ADVANTAGE.jpg)\n\nCe guide au couleurs de NeXT fêtera ses 30 ans en 2022. Le plus étonnant est que tous les concepts qui y sont exposés avaient déjà 15 ans d'avance...\n\n## Objective-C, inversion de contrôle (IOC), Delegates, Protocoles et Interface Builder \n\nBon, à l'époque, j'avoue que je n'y avais pas compris grand chose.. Trop conceptuel et loin de mes besoins quotidiens de développeur d'applications d'entreprises, je l'avais mis de coté. Pourtant tous les concepts évoqués dans ce guide de façon remarquablement pédagogique sont toujours à l'oeuvre aujourd'hui... \n\nQui a dit *l'informatique, ça change tout le temps, il vaut mieux se consacrer à la littérature* ? Houellebecq, je crois...\n\n## Objective-C\n\nD'abord il y a Objective-C, qui est à la fois un langage bas niveau (compilé, léger, rapide), et orienté-objet. Car oui,c'est une surcouche au langage C, à l'instar du C++. Ce qui est gage de rapidité et surout d'être en osmose avec le matériel sur lequel il s'exécute, Apple controlant tout, du hardware au software, ce qui est un cas unique à ma connaissance, et c'est encore plus vrai depuis l'annonce récente du processeur M1.\n\n## IOC & Delegate\n\nL'inversion de contrôle consiste à donner le pouvoir aux objets du framework (Cocoa/Cocoa Touch) et à mettre en place les liaisons et le code délégué dont se servira l'objet pour accomplir un traitement. \n\nL’inversion de contrôle (IoC) est, malgré les apparences, une solution simple et élégante au problème d’hyper-spécialisation des classes d’objets, et un remède au casse-tête qu’a pû être l’héritage multiple avant son apparition.\n\nL’idée force est de permettre à une classe non spécialisée de jouer d’autres rôles que le sien sans avoir à implémenter ces rôles en son sein. Cela permet de découpler les classes d’objets afin d’obtenir un couplage le plus faible possible, gage de flexibilité, de facilité de lecture et donc de maintenabilité.\n\nMais ce principe n’est pas basé sur un mécanisme complexe qu’il faut appliquer aveuglément, sans rien y comprendre. Non. L’IoC est basé sur une convention passée entre les humains et la machine… avec un peu de magie derrière quand même.\n\n## Protocol\n\nPour faire une analogie un peu simpliste avec le mode réel, c’est un peu comme si on vous donnait accès à une maison pour y passer la nuit en l’absence de son propriétaire juste en convenant avec lui de l’endroit où il va cacher la clé, à savoir dans le deuxième pot de fleurs de la troisième fenêtre à gauche. Ce pot de fleurs va alors agir entre vous comme une interface; c’est là qu’aura lieu l’échange des rôles entre le propriétaire et vous, qui allez pouvoir en prendre possession le temps d’une nuit.\n\nPour que la communication entre un object d'interface et votre code puisse s'établir, afin que les données s'échangent dans les deux sens, il faut appliquer le protocol requis par l'objet utilisé.\n\n\n## Interface Builder (IB)\n\nA l'époque, la mode était à la construction d'application à la souris, par simple glisser/déposer de composants graphiques (bouton, zone de texte, etc.) dans les vues de l'application.\nDans le monde Windows, il y avait Visual Basic et Delphi pour les développeurs débutants ou intermédiaires. Ces environnements étaient très productifs et tiraient avantage du confort moderne qu'apportait l'interface graphique.\n\nPour ne pas être en reste, Steve Jobs a embauché Jean-Marie Hullot (développeur de SOS interface sous MacOS) comme directeur technique afin qu'il produise un équivalent de Visual Basic dans l'environnement NeXT. Et cela n'a pas été chose facile... \nD'après une interview de l'intéressé [M'iLife by Jean-Marie Hullot](https://www.youtube.com/watch?v=LLAWk-w0l-k), pour parvenir à ses fins, il aura fallu *tordre* Objective-C. \n\nEn d'autres termes, ce mariage n'était pas très naturel, et cela se ressentait au début d'Interface Builder, qui demandait d'incessants va et vient entre code et concepteur graphique et l'ajout d'**IBOutlet** dans le code pour ouvrir une laison de données entre l'objet graphique et le code ou d'**IBAction** pour désigner une méthode prête à être utilisée par un objet graphique.\nSans parler du fumeux **File's owner**... \n", date: "2021-10-28 22:00:00", published: true, tag_list: "next, nextstep, iphone, apple, objective-c"},
#   {title: "Coder (presque) comme sur NeXT, mais sous Linux", content: "Que ce soit pour s'initier au développement Objective-C et aux concepts de l'AppKit, ou simplement pour la nostalgie du cube noir et de son espace de travail à couper le souffle, on peut savourer le travail effectué par l'équipe [GNUSTEP](http://www.gnustep.org/index.html) depuis des décennies afin de produire un environnement fonctionnel inspiré de NEXTSTEP.\n\n# Installation de AltLinux/GNUSTEP\n\nLe plus simple est d'utiliser le starterkit de la distribution AltLinux qui propose une version de son Linux intégrant GNUSTEP.\n\n[https://en.altlinux.org/Starterkits/gnustep](https://en.altlinux.org/Starterkits/gnustep)\n\n\n## Configuration\n\nUne fois sous AltLinux, vous devriez vouloir changer de clavier et de résolution écran. \n\n```\n# setxkbmap fr\n# xrandr -s 1680x1050\n```\n\n## ProjectCenter\n\nBizarrement, l'outil qui gère les projets de développement, permet la navigation dans les classes, dans les fichiers sources et qui compile tout ça pour produire une application exécutable n'est pas fourni dans la distribution AltLinux. \n\nIl vous faudra aller chercher les sources ici : [https://github.com/gnustep/apps-projectcenter](https://github.com/gnustep/apps-projectcenter) pour ensuite générer le fichier exécutable, à la manière habituelle.\n\n```\n# make;\n# make install;\n```\n\n# Coder en Objective-C\n\nLe tuto ci-dessous montre comment s'utilise ProjectCenter et Gorm pour définir l'interface de votre application, créer les liens entre l'interface et le code (Outlets/Actions).\n\nGorm ressemble beaucoup à Interface Builder, l'ancêtre de XCode.\n\n[http://www.gnustep.org/experience/PierresDevTutorial/index.html](http://www.gnustep.org/experience/PierresDevTutorial/index.html)\n\nDe quoi se faire la main avec les concepts qui sont toujours à l'action dans les dernières versions de iOS/MacOS.\n\n## Quelques bons bouquins sur Objective-C, en français\n\n- Programmation Objective-C, Le guide Big Nerd Ranch par Aaron Hillegass. [acheter sur fnac.com](https://livre.fnac.com/a4793170/Aaron-Hillegass-Programmation-objective-c-le-guide-big-nerd-ranch-developpez-vos-1e-applications-pour-mac-et-ios)\n\n- Programmation iOS, Le guide Big Nerd Ranch par Joe Conway & Aaron Hillegass. [acheter sur fnac.com](https://livre.fnac.com/a4793172/Aaron-Hillegass-Programmation-ios-le-guide-big-nerd-ranch)\n \n- Les fondamentaux de la programmation iOS, par Lemine BEYROUK. [acheter sur fnac.com](https://livre.fnac.com/a6665848/Lemine-Beyrouk-Les-fondamentaux-de-la-programmation-iOS)\n\n- Programmation iOS 6, par Jean-Marc Lacoste & Thomas Sarlandie. [acheter sur fnac.com](https://livre.fnac.com/a4837495/Jean-Marc-Lacoste-Programmation-iOS-6)\n\nCe dernier ouvrage étant, àmha, le meilleur du point de vue de la clarté et de la progression pédagogique.\n", date: "2021-11-14 23:00:00", published: true, tag_list: "next, nextstep, iphone, apple, swift, objective-c"},
#   {title: "Optimisation des applications Rails", content: "# Rappel de quelques techniques d'optimisation des applications Rails :\n\n* Evitez les 'N+1' avec Model.[includes(:slave_model)](https://apidock.com/rails/ActiveRecord/QueryMethods/includes)\n\n* Utilisez le [gem 'bullet'](https://github.com/flyerhzm/bullet) pour localiser les N+1 à éliminer \n\n* Créez un 'partial' de votre Model dès qu'il doit être affiché sous forme de lignes dans une table\n\n* Utilisez <%= render :model, collection: @models %> au lieu de \n<% @records.each do | record| >\n    <%= render record %>\n<% end %>\n\n* Evitez d'instancier des variables à tout bout de champ (surtout dans les vues), c'est gourmant en temps, en occupation mémoire et ça vous rapproche du moment où le GC va se déclencher pour faire le ménage\n\n* Evitez de créer une variable d'instance (@var) quand vous savez que sa portée restera confinée au périmètre de la méthode dans laquelle elle est\n\n* Utilisez le [gem 'scout_apm'](https://github.com/scoutapp/scout_apm_ruby) pour identifier facilement les points à optimiser de votre application\n\n* SQL: Quand une requête est longue, jouer là dans la console en y ajoutant .explain pour voir comment elle est interprétée par le moteur de base de données\n\n* SQL: Utilisez .ids dans les requête IN. ex: Mesure.includes(:device).where(device_id: @devices.ids) est beaucoup plus rapide que Mesure.includes(:device).where(device: @devices)   \n\n* Les dernières versions de Ruby et du framework Rails sont généralement plus rapides. Ca vaut le coup de migrer une application en Rails 4 vers 5 ou de passer de Ruby 2.4 à Ruby 2.6. Sans parler de la possibilité de profiter des nouveautés ;-) \n\n* N'utilisez pas l'option '--jit' de Ruby 2.6, elle n'a aucun effet sur la vitesse d'exécution de Rails... ", date: "2019-04-10 22:00:00", published: true, tag_list: "rails, ruby"},
#   {title: "IoC", content: "L'inversion de contrôle (IoC) est, malgré les apparences, une solution simple et élégante au problème d'hyper-spécialisation des classes d'objets, et un remède au casse-tête qu'a pû être l'héritage multiple avant son apparition.\n \nL'idée force est de permettre à une classe non spécialisée de jouer d'autres rôles que le sien sans avoir à implémenter ces rôles en son sein. Cela permet de découpler les classes d'objets afin d'obtenir un couplage le plus faible possible, gage de flexibilité, de facilité de lecture et donc de maintenabilité.\n\nMais ce principe n'est pas basé sur un mécanisme complexe qu'il faut appliquer aveuglément, sans rien y comprendre. Non. L'IoC est basé sur une convention passée entre les humains et la machine... avec un peu de magie derrière quand même.\n\nPour faire une analogie un peu simpliste avec le mode réel, c'est un peu comme si on vous donnait accès à une maison pour y passer la nuit en l'absence de son propriétaire juste en convenant avec lui de l'endroit où il va cacher la clé, à savoir dans le deuxième pot de fleurs de la troisième fenêtre à gauche. Ce pot de fleurs va alors agir entre vous comme une interface; c'est là qu'aura lieu l'échange des rôles entre le propriétaire et vous, qui allez pouvoir  en prendre possession le temps d'une nuit.\n", date: "2019-07-29 22:00:00", published: true, tag_list: "xamarin, ioc, protocol"},
#   {title: "Utiliser PG pour stocker les objets ActiveStorage", content: "Active Storage utilise habituellement le système de fichiers hôte pour stocker ses objets, ce qui peut poser problème si l'application Rails est hébergée chez Heroku où le système de fichiers est éphémère... \n\nPour éviter les mauvaises surprises, les objets ActiveStorage peuvent être stockés dans PG et donc de manière pérenne.\n\nL'autre avantage est de pouvoir sauvegarder toutes ces données en une fois, en un seul backup.\n\nPour installer cette facilité, procédez comme suit: \n\n- Ajouter le Gem dans votre Gemfile\n\n~~~~\n# ActiveStorage Service to store files PostgeSQL.\ngem 'active_storage-postgresql'\n~~~~\n\n- Lancez l'initialisation du Gem\n\n~~~~\n$ rails active_storage:postgresql:install\n$ rails db:migrate\n~~~~\n\n- Configurer Active Storage\n\n~~~~\nconfig/storage.yml \n\nlocal:\n  service: PostgreSQL\n~~~~\n\nEt c'est tout :)\nAttention quand même à la taille des objets, comme les images par exemple, car la base va vite être alourdie et le temps d'accès n'est pas aussi bon qu'avec de simples fichiers stockés sur disque.\n", date: "2021-01-04 23:00:00", published: true, tag_list: "rails, posgresql, active_storage"},
#   {title: "Comprendre le fonctionnement des composants FLUTTER", content: "La première difficulté quand on se lance dans l'apprentissage de FLUTTER, c’est le langage DART. Encore un langage à apprendre, avec son lot de bizarreries et de concepts abscons. \n\nEnfin, personnellement, c’est ce que je m’étais dit.\n\nEt bien finalement DART est très proche du C, voire du C# et Javascript. Donc pas de soucis de ce côté là pour qui connaît au moins l’un de ces deux langages. En tout cas pas tout de suite...\n\nCe qui m’a paru le plus complexe, au début, c'est la construction du Stateful Widget et son emboîtement avec son objet State. \n\nDe prime abord, cette articulation m’a paru plutôt étrange et difficile à intégrer, à rentrer dans le coco comme dit l’autre (pas si) débile de la télé ;-)\n\nEnfin, à bien y regarder, ce n’est pas si mystérieux. \n\nAutant un simple SatelessWidget se déclare en une seule classe qui étend la classe Stateful Widget et qui surcharge une méthode ‘build’, qui doit renvoyer un Widget.\n\nIl se doit d’utiliser ce type de Widget Stateless quand les données initiales sont finales et qu'elles ne vont pas changer. Un composant figé, en somme.\n\nQuant au StatefullWidget, c’est une autre paire de manches. Il s’emploie quand les données sont susceptibles de changer et que, en conséquence, les représentations de ces données (Text, Button, etc... ) vont devoir être redessinées à l’écran à chaque fois que les données changent.\n\nC’est pourquoi un StatefullWidget se déclare en deux classes ; l'une pour le Widget et l’autre pour son état. \n\nMais comme son nom ne l’indique pas, c’est la deuxième classe qui va contenir le code d’initialisation des valeurs initiales et la fameuse méthode build, qui va contenir l'arbre des Widget à afficher. Autant dire tout ce qui est intéressant.\n\nLa première classe, celle qui étend StatefullWidget, n’est qu’une coquille qui ne s’occupe que d’initialiser son état. \n\nEn quelque sorte elle est chargée de faire rentrer l’escargot dans sa coquille :)  \n\nA l’instar de React, il faut employer la méthode setState pour signaler un changement de données et provoquer ainsi la propagation du changement dans l'arbre des Widgets. Tous les Widgets concernés par le changement seront reconstruits illico en accord avec les nouvelles données, et replacés dans l’arbre.\n\nEn fait il y a deux arbres, un ‘Widget Tree’ et un ‘Element Tree’, auquel s’ajoute un objet ‘State Objet’, mais ce sera le sujet d’un autre post.\n", date: "2021-02-22 23:00:00", published: true, tag_list: "flutter"},
# ])

# Client.create!([
#   {name: "IAE Paris-Sorbonne", description: "Institut d’Administration des Entreprises de Paris\nChargé de mission pour la rénovation du système d’information\nDéveloppement d’une application de gestion du planning des cours et des états de services des intervenants", tag_list: "Ruby on Rails, React & Objective-C"},
#   {name: "SCOPELEC", description: "Conception et développement d’un logiciel de gestion du suivi des activités de déploiement et de maintenance de la fibre optique (FTTH).\nLogiciel bien-nommé TALEA. Projet commencé seul puis AMOA aidé par 3 développeurs en France et en Roumanie", tag_list: "Ruby on Rails"},
#   {name: "L’Oréal/YSL", description: "Portage iPAD d’une WebApp ‘My BEAUTY INDEX’, qui sera utilisée sur les points de ventes YSL monde. Gestion d’un développeur en Slovaquie", tag_list: "Objective-C"},
#   {name: "PROLOGUE GROUP / ALHAMBRA-EIDOS", description: "Conception et développement d’un outil de suivi de la qualité des opérations de maintenance ferroviaire (soudure et meulage de rail).\nLogiciel baptisé AEMMS.", tag_list: "C#, .NET, Windows, Ruby on Rails"},
#   {name: "INNOSERV", description: "AMOA pour la réalisation d’une plateforme Européenne sur l’innovation dans les services sociaux.\nGestion de 2 développeurs en Hongrie (Drupal/PHP). Développement de l’application iPhone.", tag_list: "DRUPAL, Objective-C, iOS"},
#   {name: "RNMA", description: "Réseau National des Maisons des Associations\nPlateforme B2B/B2C", tag_list: "Ruby on Rails"},
#   {name: "Le T-Shirt Français (B2B)", description: "Conception et développement de la plateforme de cotation LTSF.PRO", tag_list: "Ruby on Rails"},
#   {name: "GROHE", description: "Conception et développement d’une plateforme de workflow de factures fournisseurs", tag_list: "Ruby on Rails"},
#   {name: "PPRS Research", description: "Conception et développement d’une plateforme de collecte de données du sommeil issues d’un dispositif médical innovant; Somno-ART", tag_list: "Ruby on Rails"},
#   {name: "AirJin", description: "Conception et développement d’une plateforme de collecte et visualisation de données issues des capteurs d’un appareil de suivi de la qualité de l’air", tag_list: "Ruby on Rails"}
# ])